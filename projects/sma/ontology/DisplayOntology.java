// file: DisplayOntology.java generated by ontology bean generator.  DO NOT EDIT, UNLESS YOU ARE REALLY SURE WHAT YOU ARE DOING!
package sma.ontology;

import jade.content.onto.*;
import jade.content.schema.*;
import jade.util.leap.HashMap;
import jade.content.lang.Codec;
import jade.core.CaseInsensitiveString;

/** file: DisplayOntology.java
 * @author ontology bean generator
 * @version 2010/03/4, 21:33:23
 */
public class DisplayOntology extends jade.content.onto.Ontology  {
  //NAME
  public static final String ONTOLOGY_NAME = "Display";
  // The singleton instance of this ontology
  private static ReflectiveIntrospector introspect = new ReflectiveIntrospector();
  private static Ontology theInstance = new DisplayOntology();
  public static Ontology getInstance() {
     return theInstance;
  }


   // VOCABULARY
    public static final String SIZE_HEIGHT="height";
    public static final String SIZE_WIDTH="width";
    public static final String SIZE="Size";
    public static final String ENVIRONMENTOBJECT_POSITION="position";
    public static final String ENVIRONMENTOBJECT_SIZE="size";
    public static final String ENVIRONMENTOBJECT_ID="id";
    public static final String ENVIRONMENTOBJECT_PARENT="parent";
    public static final String ENVIRONMENTOBJECT="EnvironmentObject";
    public static final String MOVEMENT_STARTPOS="startPos";
    public static final String MOVEMENT_SPEED="speed";
    public static final String MOVEMENT="Movement";
    public static final String PLAYGROUNDOBJECT_CHILDOBJECTS="childObjects";
    public static final String PLAYGROUNDOBJECT="PlaygroundObject";
    public static final String OBSTACLEOBJECT="ObstacleObject";
    public static final String SPEED_YSPEED="ySpeed";
    public static final String SPEED_XSPEED="xSpeed";
    public static final String SPEED="Speed";
    public static final String AGENTOBJECT_CURRENTSPEED="currentSpeed";
    public static final String AGENTOBJECT_MAXSPEED="maxSpeed";
    public static final String AGENTOBJECT_AID="aid";
    public static final String AGENTOBJECT_AGENTCLASS="agentClass";
    public static final String AGENTOBJECT="AgentObject";
    public static final String ENVIRONMENT_PROJECTNAME="projectName";
    public static final String ENVIRONMENT_SVGFILE="svgFile";
    public static final String ENVIRONMENT_ROOTPLAYGROUND="rootPlayground";
    public static final String ENVIRONMENT_MASTERAGENT="masterAgent";
    public static final String ENVIRONMENT="Environment";
    public static final String POSITION_XPOS="xPos";
    public static final String POSITION_YPOS="yPos";
    public static final String POSITION="Position";

  /**
   * Constructor
  */
  private DisplayOntology(){ 
    super(ONTOLOGY_NAME, BasicOntology.getInstance());
    try { 

    // adding Concept(s)
    ConceptSchema positionSchema = new ConceptSchema(POSITION);
    add(positionSchema, sma.ontology.Position.class);
    ConceptSchema environmentSchema = new ConceptSchema(ENVIRONMENT);
    add(environmentSchema, sma.ontology.Environment.class);
    ConceptSchema agentObjectSchema = new ConceptSchema(AGENTOBJECT);
    add(agentObjectSchema, sma.ontology.AgentObject.class);
    ConceptSchema speedSchema = new ConceptSchema(SPEED);
    add(speedSchema, sma.ontology.Speed.class);
    ConceptSchema obstacleObjectSchema = new ConceptSchema(OBSTACLEOBJECT);
    add(obstacleObjectSchema, sma.ontology.ObstacleObject.class);
    ConceptSchema playgroundObjectSchema = new ConceptSchema(PLAYGROUNDOBJECT);
    add(playgroundObjectSchema, sma.ontology.PlaygroundObject.class);
    ConceptSchema movementSchema = new ConceptSchema(MOVEMENT);
    add(movementSchema, sma.ontology.Movement.class);
    ConceptSchema environmentObjectSchema = new ConceptSchema(ENVIRONMENTOBJECT);
    add(environmentObjectSchema, sma.ontology.EnvironmentObject.class);
    ConceptSchema sizeSchema = new ConceptSchema(SIZE);
    add(sizeSchema, sma.ontology.Size.class);

    // adding AgentAction(s)

    // adding AID(s)

    // adding Predicate(s)


    // adding fields
    positionSchema.add(POSITION_YPOS, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    positionSchema.add(POSITION_XPOS, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.MANDATORY);
    environmentSchema.add(ENVIRONMENT_MASTERAGENT, (ConceptSchema)getSchema(BasicOntology.AID), ObjectSchema.MANDATORY);
    environmentSchema.add(ENVIRONMENT_ROOTPLAYGROUND, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    environmentSchema.add(ENVIRONMENT_SVGFILE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    environmentSchema.add(ENVIRONMENT_PROJECTNAME, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    agentObjectSchema.add(AGENTOBJECT_AGENTCLASS, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    agentObjectSchema.add(AGENTOBJECT_AID, (ConceptSchema)getSchema(BasicOntology.AID), ObjectSchema.MANDATORY);
    agentObjectSchema.add(AGENTOBJECT_MAXSPEED, speedSchema, ObjectSchema.MANDATORY);
    agentObjectSchema.add(AGENTOBJECT_CURRENTSPEED, speedSchema, ObjectSchema.MANDATORY);
    speedSchema.add(SPEED_XSPEED, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.MANDATORY);
    speedSchema.add(SPEED_YSPEED, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.MANDATORY);
    playgroundObjectSchema.add(PLAYGROUNDOBJECT_CHILDOBJECTS, environmentObjectSchema, 0, ObjectSchema.UNLIMITED);
    movementSchema.add(MOVEMENT_SPEED, speedSchema, ObjectSchema.MANDATORY);
    movementSchema.add(MOVEMENT_STARTPOS, positionSchema, ObjectSchema.MANDATORY);
    environmentObjectSchema.add(ENVIRONMENTOBJECT_PARENT, playgroundObjectSchema, ObjectSchema.OPTIONAL);
    environmentObjectSchema.add(ENVIRONMENTOBJECT_ID, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    environmentObjectSchema.add(ENVIRONMENTOBJECT_SIZE, sizeSchema, ObjectSchema.MANDATORY);
    environmentObjectSchema.add(ENVIRONMENTOBJECT_POSITION, positionSchema, ObjectSchema.MANDATORY);
    sizeSchema.add(SIZE_WIDTH, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.MANDATORY);
    sizeSchema.add(SIZE_HEIGHT, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.MANDATORY);

    // adding name mappings

    // adding inheritance
    agentObjectSchema.addSuperSchema(environmentObjectSchema);
    obstacleObjectSchema.addSuperSchema(environmentObjectSchema);
    playgroundObjectSchema.addSuperSchema(environmentObjectSchema);

   }catch (java.lang.Exception e) {e.printStackTrace();}
  }
  }
