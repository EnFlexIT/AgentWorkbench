// file: ContainerTerminalOntology.java generated by ontology bean generator.  DO NOT EDIT, UNLESS YOU ARE REALLY SURE WHAT YOU ARE DOING!
package contmas.ontology;

import jade.content.onto.BasicOntology;
import jade.content.onto.Ontology;
import jade.content.onto.ReflectiveIntrospector;
import jade.content.schema.AgentActionSchema;
import jade.content.schema.ConceptSchema;
import jade.content.schema.ObjectSchema;
import jade.content.schema.TermSchema;

/** file: ContainerTerminalOntology.java
 * @author ontology bean generator
 * @version 2010/04/12, 23:13:30
 */
public class ContainerTerminalOntology extends jade.content.onto.Ontology{
	/**
	 * 
	 */
	private static final long serialVersionUID=5063938239767133185L;
//NAME
	public static final String ONTOLOGY_NAME="ContainerTerminal";
	// The singleton instance of this ontology
	private static ReflectiveIntrospector introspect=new ReflectiveIntrospector();
	private static Ontology theInstance=new ContainerTerminalOntology();

	public static Ontology getInstance(){
		return ContainerTerminalOntology.theInstance;
	}

	// VOCABULARY
	public static final String CRANE="Crane";
	public static final String APRON="Apron";
	public static final String ACTIVECONTAINERHOLDER_CAPABLE_OF="capable_of";
	public static final String ACTIVECONTAINERHOLDER="ActiveContainerHolder";
	public static final String PASSIVECONTAINERHOLDER="PassiveContainerHolder";
	public static final String AGV="AGV";
	public static final String SHIP_LENGTH="length";
	public static final String SHIP="Ship";
	public static final String CONTAINERHOLDER_CONTAINER_STATES="container_states";
	public static final String CONTAINERHOLDER_SERVICE_TYPE="service_type";
	public static final String CONTAINERHOLDER_CONTAINS="contains";
	public static final String CONTAINERHOLDER_LOCALNAME="localName";
	public static final String CONTAINERHOLDER_LIVES_IN="lives_in";
	public static final String CONTAINERHOLDER_CONTRACTORS="contractors";
	public static final String CONTAINERHOLDER="ContainerHolder";
	public static final String STATICCONTAINERHOLDER="StaticContainerHolder";
	public static final String TRAIN="Train";
	public static final String STRADDLECARRIER="StraddleCarrier";
	public static final String RMG="RMG";
	public static final String YARD="Yard";
	public static final String PROVIDEPOPULATEDBAYMAP_PROVIDES="provides";
	public static final String PROVIDEPOPULATEDBAYMAP="ProvidePopulatedBayMap";
	public static final String REQUESTRANDOMBAYMAP_X_DIMENSION="x_dimension";
	public static final String REQUESTRANDOMBAYMAP_Z_DIMENSION="z_dimension";
	public static final String REQUESTRANDOMBAYMAP_Y_DIMENSION="y_dimension";
	public static final String REQUESTRANDOMBAYMAP="RequestRandomBayMap";
	public static final String ASSIGNHARBORQUAY_AVAILABLE_CRANES="available_cranes";
	public static final String ASSIGNHARBORQUAY_ASSIGNED_QUAY="assigned_quay";
	public static final String ASSIGNHARBORQUAY="AssignHarborQuay";
	public static final String PROVIDEBAYMAP_PROVIDES="provides";
	public static final String PROVIDEBAYMAP="ProvideBayMap";
	public static final String PROVIDERANDOMLOADSEQUENCE_NEXT_STEP="next_step";
	public static final String PROVIDERANDOMLOADSEQUENCE="ProvideRandomLoadSequence";
	public static final String REQUESTRANDOMLOADSEQUENCE_PROVIDES="provides";
	public static final String REQUESTRANDOMLOADSEQUENCE="RequestRandomLoadSequence";
	public static final String REQUESTEXECUTELOADSEQUENCE_NEXT_STEP="next_step";
	public static final String REQUESTEXECUTELOADSEQUENCE="RequestExecuteLoadSequence";
	public static final String REQUESTPOPULATEDBAYMAP_POPULATE_ON="populate_on";
	public static final String REQUESTPOPULATEDBAYMAP="RequestPopulatedBayMap";
	public static final String REQUESTHARBOURSETUP="RequestHarbourSetup";
	public static final String REQUESTONTOLOGYREPRESENTATION_AGENT_IN_QUESTION="agent_in_question";
	public static final String REQUESTONTOLOGYREPRESENTATION="RequestOntologyRepresentation";
	public static final String PROVIDEHARBOURSETUP_CURRENTLY_ACTIVE_CONTAINER_HOLDERS="currently_active_container_holders";
	public static final String PROVIDEHARBOURSETUP_CURRENT_HARBOUR_LAYOUT="current_harbour_layout";
	public static final String PROVIDEHARBOURSETUP="ProvideHarbourSetup";
	public static final String PROPOSELOADOFFER_LOAD_OFFER="load_offer";
	public static final String PROPOSELOADOFFER="ProposeLoadOffer";
	public static final String CALLFORPROPOSALSONLOADSTAGE_REQUIRED_TURNOVER_CAPACITY="required_turnover_capacity";
	public static final String CALLFORPROPOSALSONLOADSTAGE="CallForProposalsOnLoadStage";
	public static final String ACCEPTLOADOFFER_LOAD_OFFER="load_offer";
	public static final String ACCEPTLOADOFFER="AcceptLoadOffer";
	public static final String REJECTLOADOFFER_LOAD_OFFER="load_offer";
	public static final String REJECTLOADOFFER="RejectLoadOffer";
	public static final String PROVIDEONTOLOGYREPRESENTATION_ACCORDING_ONTREP="according_ontrep";
	public static final String PROVIDEONTOLOGYREPRESENTATION="ProvideOntologyRepresentation";
	public static final String STARTNEWCONTAINERHOLDER_NAME="name";
	public static final String STARTNEWCONTAINERHOLDER_TO_BE_ADDED="to_be_added";
	public static final String STARTNEWCONTAINERHOLDER_POPULATE="populate";
	public static final String STARTNEWCONTAINERHOLDER_RANDOMIZE="randomize";
	public static final String STARTNEWCONTAINERHOLDER="StartNewContainerHolder";
	public static final String ANNOUNCELOADSTATUS_LOAD_OFFER="load_offer";
	public static final String ANNOUNCELOADSTATUS_LOAD_STATUS="load_status";
	public static final String ANNOUNCELOADSTATUS="AnnounceLoadStatus";
	public static final String ENROLLATHARBOR_REQUIRED_TURNOVER_CAPACITY="required_turnover_capacity";
	public static final String ENROLLATHARBOR_SHIP_LENGTH="ship_length";
	public static final String ENROLLATHARBOR="EnrollAtHarbor";
	public static final String QUAY="Quay";
	public static final String CONTAINER_WEIGHT="weight";
	public static final String CONTAINER_BIC_CODE="bic_code";
	public static final String CONTAINER_HEIGHT="height";
	public static final String CONTAINER_LENGTH="length";
	public static final String CONTAINER_WIDTH="width";
	public static final String CONTAINER="Container";
	public static final String TOCHASSTATE_STATE="state";
	public static final String TOCHASSTATE_SUBJECTED_TOC="subjected_toc";
	public static final String TOCHASSTATE="TOCHasState";
	public static final String TRANSPORTORDERCHAIN_TRANSPORTS="transports";
	public static final String TRANSPORTORDERCHAIN_TERMINATES_AT="terminates_at";
	public static final String TRANSPORTORDERCHAIN_IS_LINKED_BY="is_linked_by";
	public static final String TRANSPORTORDERCHAIN="TransportOrderChain";
	public static final String LOADLIST_CONSISTS_OF="consists_of";
	public static final String LOADLIST_NEXT_STEP="next_step";
	public static final String LOADLIST="LoadList";
	public static final String HARBOUR="Harbour";
	public static final String YARDAREA="YardArea";
	public static final String DESIGNATOR_ABSTRACT_DESIGNATION="abstract_designation";
	public static final String DESIGNATOR_TYPE="type";
	public static final String DESIGNATOR_CONCRETE_DESIGNATION="concrete_designation";
	public static final String DESIGNATOR="Designator";
	public static final String STREET="Street";
	public static final String TRANSPORTORDERCHAINSTATE="TransportOrderChainState";
	public static final String BLOCKADDRESS_X_DIMENSION="x_dimension";
	public static final String BLOCKADDRESS_Z_DIMENSION="z_dimension";
	public static final String BLOCKADDRESS_LOCATES="locates";
	public static final String BLOCKADDRESS_Y_DIMENSION="y_dimension";
	public static final String BLOCKADDRESS="BlockAddress";
	public static final String FAILED="Failed";
	public static final String RAIL="Rail";
	public static final String ANNOUNCED="Announced";
	public static final String BERTH="Berth";
	public static final String BAYMAP_X_DIMENSION="x_dimension";
	public static final String BAYMAP_Z_DIMENSION="z_dimension";
	public static final String BAYMAP_IS_FILLED_WITH="is_filled_with";
	public static final String BAYMAP_Y_DIMENSION="y_dimension";
	public static final String BAYMAP="BayMap";
	public static final String PENDINGFORSUBCFP="PendingForSubCFP";
	public static final String ADMINISTERED="Administered";
	public static final String APRONAREA="ApronArea";
	public static final String DOMAIN_ID="id";
	public static final String DOMAIN_LIES_IN="lies_in";
	public static final String DOMAIN_HAS_SUBDOMAINS="has_subdomains";
	public static final String DOMAIN="Domain";
	public static final String TWENTYFOOTCONTAINER="TwentyFootContainer";
	public static final String PROPOSEDFOR="ProposedFor";
	public static final String SEA="Sea";
	public static final String TRANSPORTORDER_ENDS_AT="ends_at";
	public static final String TRANSPORTORDER_STARTS_AT="starts_at";
	public static final String TRANSPORTORDER_TAKES="takes";
	public static final String TRANSPORTORDER="TransportOrder";
	public static final String LAND="Land";

	/**
	 * Constructor
	*/
	private ContainerTerminalOntology(){
		super(ContainerTerminalOntology.ONTOLOGY_NAME,BasicOntology.getInstance());
		try{

			// adding Concept(s)
			ConceptSchema landSchema=new ConceptSchema(ContainerTerminalOntology.LAND);
			this.add(landSchema,contmas.ontology.Land.class);
			ConceptSchema transportOrderSchema=new ConceptSchema(ContainerTerminalOntology.TRANSPORTORDER);
			this.add(transportOrderSchema,contmas.ontology.TransportOrder.class);
			ConceptSchema seaSchema=new ConceptSchema(ContainerTerminalOntology.SEA);
			this.add(seaSchema,contmas.ontology.Sea.class);
			ConceptSchema proposedForSchema=new ConceptSchema(ContainerTerminalOntology.PROPOSEDFOR);
			this.add(proposedForSchema,contmas.ontology.ProposedFor.class);
			ConceptSchema twentyFootContainerSchema=new ConceptSchema(ContainerTerminalOntology.TWENTYFOOTCONTAINER);
			this.add(twentyFootContainerSchema,contmas.ontology.TwentyFootContainer.class);
			ConceptSchema domainSchema=new ConceptSchema(ContainerTerminalOntology.DOMAIN);
			this.add(domainSchema,contmas.ontology.Domain.class);
			ConceptSchema apronAreaSchema=new ConceptSchema(ContainerTerminalOntology.APRONAREA);
			this.add(apronAreaSchema,contmas.ontology.ApronArea.class);
			ConceptSchema administeredSchema=new ConceptSchema(ContainerTerminalOntology.ADMINISTERED);
			this.add(administeredSchema,contmas.ontology.Administered.class);
			ConceptSchema pendingForSubCFPSchema=new ConceptSchema(ContainerTerminalOntology.PENDINGFORSUBCFP);
			this.add(pendingForSubCFPSchema,contmas.ontology.PendingForSubCFP.class);
			ConceptSchema bayMapSchema=new ConceptSchema(ContainerTerminalOntology.BAYMAP);
			this.add(bayMapSchema,contmas.ontology.BayMap.class);
			ConceptSchema berthSchema=new ConceptSchema(ContainerTerminalOntology.BERTH);
			this.add(berthSchema,contmas.ontology.Berth.class);
			ConceptSchema announcedSchema=new ConceptSchema(ContainerTerminalOntology.ANNOUNCED);
			this.add(announcedSchema,contmas.ontology.Announced.class);
			ConceptSchema railSchema=new ConceptSchema(ContainerTerminalOntology.RAIL);
			this.add(railSchema,contmas.ontology.Rail.class);
			ConceptSchema failedSchema=new ConceptSchema(ContainerTerminalOntology.FAILED);
			this.add(failedSchema,contmas.ontology.Failed.class);
			ConceptSchema blockAddressSchema=new ConceptSchema(ContainerTerminalOntology.BLOCKADDRESS);
			this.add(blockAddressSchema,contmas.ontology.BlockAddress.class);
			ConceptSchema transportOrderChainStateSchema=new ConceptSchema(ContainerTerminalOntology.TRANSPORTORDERCHAINSTATE);
			this.add(transportOrderChainStateSchema,contmas.ontology.TransportOrderChainState.class);
			ConceptSchema streetSchema=new ConceptSchema(ContainerTerminalOntology.STREET);
			this.add(streetSchema,contmas.ontology.Street.class);
			ConceptSchema designatorSchema=new ConceptSchema(ContainerTerminalOntology.DESIGNATOR);
			this.add(designatorSchema,contmas.ontology.Designator.class);
			ConceptSchema yardAreaSchema=new ConceptSchema(ContainerTerminalOntology.YARDAREA);
			this.add(yardAreaSchema,contmas.ontology.YardArea.class);
			ConceptSchema harbourSchema=new ConceptSchema(ContainerTerminalOntology.HARBOUR);
			this.add(harbourSchema,contmas.ontology.Harbour.class);
			ConceptSchema loadListSchema=new ConceptSchema(ContainerTerminalOntology.LOADLIST);
			this.add(loadListSchema,contmas.ontology.LoadList.class);
			ConceptSchema transportOrderChainSchema=new ConceptSchema(ContainerTerminalOntology.TRANSPORTORDERCHAIN);
			this.add(transportOrderChainSchema,contmas.ontology.TransportOrderChain.class);
			ConceptSchema tocHasStateSchema=new ConceptSchema(ContainerTerminalOntology.TOCHASSTATE);
			this.add(tocHasStateSchema,contmas.ontology.TOCHasState.class);
			ConceptSchema containerSchema=new ConceptSchema(ContainerTerminalOntology.CONTAINER);
			this.add(containerSchema,contmas.ontology.Container.class);
			ConceptSchema quaySchema=new ConceptSchema(ContainerTerminalOntology.QUAY);
			this.add(quaySchema,contmas.ontology.Quay.class);

			// adding AgentAction(s)
			AgentActionSchema enrollAtHarborSchema=new AgentActionSchema(ContainerTerminalOntology.ENROLLATHARBOR);
			this.add(enrollAtHarborSchema,contmas.ontology.EnrollAtHarbor.class);
			AgentActionSchema announceLoadStatusSchema=new AgentActionSchema(ContainerTerminalOntology.ANNOUNCELOADSTATUS);
			this.add(announceLoadStatusSchema,contmas.ontology.AnnounceLoadStatus.class);
			AgentActionSchema startNewContainerHolderSchema=new AgentActionSchema(ContainerTerminalOntology.STARTNEWCONTAINERHOLDER);
			this.add(startNewContainerHolderSchema,contmas.ontology.StartNewContainerHolder.class);
			AgentActionSchema provideOntologyRepresentationSchema=new AgentActionSchema(ContainerTerminalOntology.PROVIDEONTOLOGYREPRESENTATION);
			this.add(provideOntologyRepresentationSchema,contmas.ontology.ProvideOntologyRepresentation.class);
			AgentActionSchema rejectLoadOfferSchema=new AgentActionSchema(ContainerTerminalOntology.REJECTLOADOFFER);
			this.add(rejectLoadOfferSchema,contmas.ontology.RejectLoadOffer.class);
			AgentActionSchema acceptLoadOfferSchema=new AgentActionSchema(ContainerTerminalOntology.ACCEPTLOADOFFER);
			this.add(acceptLoadOfferSchema,contmas.ontology.AcceptLoadOffer.class);
			AgentActionSchema callForProposalsOnLoadStageSchema=new AgentActionSchema(ContainerTerminalOntology.CALLFORPROPOSALSONLOADSTAGE);
			this.add(callForProposalsOnLoadStageSchema,contmas.ontology.CallForProposalsOnLoadStage.class);
			AgentActionSchema proposeLoadOfferSchema=new AgentActionSchema(ContainerTerminalOntology.PROPOSELOADOFFER);
			this.add(proposeLoadOfferSchema,contmas.ontology.ProposeLoadOffer.class);
			AgentActionSchema provideHarbourSetupSchema=new AgentActionSchema(ContainerTerminalOntology.PROVIDEHARBOURSETUP);
			this.add(provideHarbourSetupSchema,contmas.ontology.ProvideHarbourSetup.class);
			AgentActionSchema requestOntologyRepresentationSchema=new AgentActionSchema(ContainerTerminalOntology.REQUESTONTOLOGYREPRESENTATION);
			this.add(requestOntologyRepresentationSchema,contmas.ontology.RequestOntologyRepresentation.class);
			AgentActionSchema requestHarbourSetupSchema=new AgentActionSchema(ContainerTerminalOntology.REQUESTHARBOURSETUP);
			this.add(requestHarbourSetupSchema,contmas.ontology.RequestHarbourSetup.class);
			AgentActionSchema requestPopulatedBayMapSchema=new AgentActionSchema(ContainerTerminalOntology.REQUESTPOPULATEDBAYMAP);
			this.add(requestPopulatedBayMapSchema,contmas.ontology.RequestPopulatedBayMap.class);
			AgentActionSchema requestExecuteLoadSequenceSchema=new AgentActionSchema(ContainerTerminalOntology.REQUESTEXECUTELOADSEQUENCE);
			this.add(requestExecuteLoadSequenceSchema,contmas.ontology.RequestExecuteLoadSequence.class);
			AgentActionSchema requestRandomLoadSequenceSchema=new AgentActionSchema(ContainerTerminalOntology.REQUESTRANDOMLOADSEQUENCE);
			this.add(requestRandomLoadSequenceSchema,contmas.ontology.RequestRandomLoadSequence.class);
			AgentActionSchema provideRandomLoadSequenceSchema=new AgentActionSchema(ContainerTerminalOntology.PROVIDERANDOMLOADSEQUENCE);
			this.add(provideRandomLoadSequenceSchema,contmas.ontology.ProvideRandomLoadSequence.class);
			AgentActionSchema provideBayMapSchema=new AgentActionSchema(ContainerTerminalOntology.PROVIDEBAYMAP);
			this.add(provideBayMapSchema,contmas.ontology.ProvideBayMap.class);
			AgentActionSchema assignHarborQuaySchema=new AgentActionSchema(ContainerTerminalOntology.ASSIGNHARBORQUAY);
			this.add(assignHarborQuaySchema,contmas.ontology.AssignHarborQuay.class);
			AgentActionSchema requestRandomBayMapSchema=new AgentActionSchema(ContainerTerminalOntology.REQUESTRANDOMBAYMAP);
			this.add(requestRandomBayMapSchema,contmas.ontology.RequestRandomBayMap.class);
			AgentActionSchema providePopulatedBayMapSchema=new AgentActionSchema(ContainerTerminalOntology.PROVIDEPOPULATEDBAYMAP);
			this.add(providePopulatedBayMapSchema,contmas.ontology.ProvidePopulatedBayMap.class);

			// adding AID(s)
			ConceptSchema yardSchema=new ConceptSchema(ContainerTerminalOntology.YARD);
			this.add(yardSchema,contmas.ontology.Yard.class);
			ConceptSchema rmgSchema=new ConceptSchema(ContainerTerminalOntology.RMG);
			this.add(rmgSchema,contmas.ontology.RMG.class);
			ConceptSchema straddleCarrierSchema=new ConceptSchema(ContainerTerminalOntology.STRADDLECARRIER);
			this.add(straddleCarrierSchema,contmas.ontology.StraddleCarrier.class);
			ConceptSchema trainSchema=new ConceptSchema(ContainerTerminalOntology.TRAIN);
			this.add(trainSchema,contmas.ontology.Train.class);
			ConceptSchema staticContainerHolderSchema=new ConceptSchema(ContainerTerminalOntology.STATICCONTAINERHOLDER);
			this.add(staticContainerHolderSchema,contmas.ontology.StaticContainerHolder.class);
			ConceptSchema containerHolderSchema=new ConceptSchema(ContainerTerminalOntology.CONTAINERHOLDER);
			this.add(containerHolderSchema,contmas.ontology.ContainerHolder.class);
			ConceptSchema shipSchema=new ConceptSchema(ContainerTerminalOntology.SHIP);
			this.add(shipSchema,contmas.ontology.Ship.class);
			ConceptSchema agvSchema=new ConceptSchema(ContainerTerminalOntology.AGV);
			this.add(agvSchema,contmas.ontology.AGV.class);
			ConceptSchema passiveContainerHolderSchema=new ConceptSchema(ContainerTerminalOntology.PASSIVECONTAINERHOLDER);
			this.add(passiveContainerHolderSchema,contmas.ontology.PassiveContainerHolder.class);
			ConceptSchema activeContainerHolderSchema=new ConceptSchema(ContainerTerminalOntology.ACTIVECONTAINERHOLDER);
			this.add(activeContainerHolderSchema,contmas.ontology.ActiveContainerHolder.class);
			ConceptSchema apronSchema=new ConceptSchema(ContainerTerminalOntology.APRON);
			this.add(apronSchema,contmas.ontology.Apron.class);
			ConceptSchema craneSchema=new ConceptSchema(ContainerTerminalOntology.CRANE);
			this.add(craneSchema,contmas.ontology.Crane.class);

			// adding Predicate(s)

			// adding fields
			transportOrderSchema.add(ContainerTerminalOntology.TRANSPORTORDER_TAKES,(TermSchema) this.getSchema(BasicOntology.FLOAT),ObjectSchema.OPTIONAL);
			transportOrderSchema.add(ContainerTerminalOntology.TRANSPORTORDER_STARTS_AT,designatorSchema,ObjectSchema.OPTIONAL);
			transportOrderSchema.add(ContainerTerminalOntology.TRANSPORTORDER_ENDS_AT,designatorSchema,ObjectSchema.OPTIONAL);
			domainSchema.add(ContainerTerminalOntology.DOMAIN_HAS_SUBDOMAINS,domainSchema,0,ObjectSchema.UNLIMITED);
			domainSchema.add(ContainerTerminalOntology.DOMAIN_LIES_IN,domainSchema,ObjectSchema.OPTIONAL);
			domainSchema.add(ContainerTerminalOntology.DOMAIN_ID,(TermSchema) this.getSchema(BasicOntology.STRING),ObjectSchema.OPTIONAL);
			bayMapSchema.add(ContainerTerminalOntology.BAYMAP_Y_DIMENSION,(TermSchema) this.getSchema(BasicOntology.INTEGER),ObjectSchema.OPTIONAL);
			bayMapSchema.add(ContainerTerminalOntology.BAYMAP_IS_FILLED_WITH,blockAddressSchema,0,ObjectSchema.UNLIMITED);
			bayMapSchema.add(ContainerTerminalOntology.BAYMAP_Z_DIMENSION,(TermSchema) this.getSchema(BasicOntology.INTEGER),ObjectSchema.OPTIONAL);
			bayMapSchema.add(ContainerTerminalOntology.BAYMAP_X_DIMENSION,(TermSchema) this.getSchema(BasicOntology.INTEGER),ObjectSchema.OPTIONAL);
			blockAddressSchema.add(ContainerTerminalOntology.BLOCKADDRESS_Y_DIMENSION,(TermSchema) this.getSchema(BasicOntology.INTEGER),ObjectSchema.OPTIONAL);
			blockAddressSchema.add(ContainerTerminalOntology.BLOCKADDRESS_LOCATES,containerSchema,ObjectSchema.OPTIONAL);
			blockAddressSchema.add(ContainerTerminalOntology.BLOCKADDRESS_Z_DIMENSION,(TermSchema) this.getSchema(BasicOntology.INTEGER),ObjectSchema.OPTIONAL);
			blockAddressSchema.add(ContainerTerminalOntology.BLOCKADDRESS_X_DIMENSION,(TermSchema) this.getSchema(BasicOntology.INTEGER),ObjectSchema.OPTIONAL);
			designatorSchema.add(ContainerTerminalOntology.DESIGNATOR_CONCRETE_DESIGNATION,(ConceptSchema) this.getSchema(BasicOntology.AID),ObjectSchema.OPTIONAL);
			designatorSchema.add(ContainerTerminalOntology.DESIGNATOR_TYPE,(TermSchema) this.getSchema(BasicOntology.STRING),ObjectSchema.OPTIONAL);
			designatorSchema.add(ContainerTerminalOntology.DESIGNATOR_ABSTRACT_DESIGNATION,domainSchema,ObjectSchema.OPTIONAL);
			loadListSchema.add(ContainerTerminalOntology.LOADLIST_NEXT_STEP,loadListSchema,ObjectSchema.OPTIONAL);
			loadListSchema.add(ContainerTerminalOntology.LOADLIST_CONSISTS_OF,transportOrderChainSchema,0,ObjectSchema.UNLIMITED);
			transportOrderChainSchema.add(ContainerTerminalOntology.TRANSPORTORDERCHAIN_IS_LINKED_BY,transportOrderSchema,0,ObjectSchema.UNLIMITED);
			transportOrderChainSchema.add(ContainerTerminalOntology.TRANSPORTORDERCHAIN_TERMINATES_AT,(TermSchema) this.getSchema(BasicOntology.STRING),ObjectSchema.OPTIONAL);
			transportOrderChainSchema.add(ContainerTerminalOntology.TRANSPORTORDERCHAIN_TRANSPORTS,containerSchema,ObjectSchema.OPTIONAL);
			tocHasStateSchema.add(ContainerTerminalOntology.TOCHASSTATE_SUBJECTED_TOC,transportOrderChainSchema,ObjectSchema.OPTIONAL);
			tocHasStateSchema.add(ContainerTerminalOntology.TOCHASSTATE_STATE,transportOrderChainStateSchema,ObjectSchema.OPTIONAL);
			containerSchema.add(ContainerTerminalOntology.CONTAINER_WIDTH,(TermSchema) this.getSchema(BasicOntology.FLOAT),ObjectSchema.OPTIONAL);
			containerSchema.add(ContainerTerminalOntology.CONTAINER_LENGTH,(TermSchema) this.getSchema(BasicOntology.FLOAT),ObjectSchema.OPTIONAL);
			containerSchema.add(ContainerTerminalOntology.CONTAINER_HEIGHT,(TermSchema) this.getSchema(BasicOntology.FLOAT),ObjectSchema.OPTIONAL);
			containerSchema.add(ContainerTerminalOntology.CONTAINER_BIC_CODE,(TermSchema) this.getSchema(BasicOntology.STRING),ObjectSchema.OPTIONAL);
			containerSchema.add(ContainerTerminalOntology.CONTAINER_WEIGHT,(TermSchema) this.getSchema(BasicOntology.FLOAT),ObjectSchema.OPTIONAL);
			enrollAtHarborSchema.add(ContainerTerminalOntology.ENROLLATHARBOR_SHIP_LENGTH,(TermSchema) this.getSchema(BasicOntology.FLOAT),ObjectSchema.OPTIONAL);
			enrollAtHarborSchema.add(ContainerTerminalOntology.ENROLLATHARBOR_REQUIRED_TURNOVER_CAPACITY,loadListSchema,ObjectSchema.OPTIONAL);
			announceLoadStatusSchema.add(ContainerTerminalOntology.ANNOUNCELOADSTATUS_LOAD_STATUS,(TermSchema) this.getSchema(BasicOntology.STRING),ObjectSchema.OPTIONAL);
			announceLoadStatusSchema.add(ContainerTerminalOntology.ANNOUNCELOADSTATUS_LOAD_OFFER,transportOrderChainSchema,ObjectSchema.OPTIONAL);
			startNewContainerHolderSchema.add(ContainerTerminalOntology.STARTNEWCONTAINERHOLDER_RANDOMIZE,(TermSchema) this.getSchema(BasicOntology.BOOLEAN),ObjectSchema.OPTIONAL);
			startNewContainerHolderSchema.add(ContainerTerminalOntology.STARTNEWCONTAINERHOLDER_POPULATE,(TermSchema) this.getSchema(BasicOntology.BOOLEAN),ObjectSchema.OPTIONAL);
			startNewContainerHolderSchema.add(ContainerTerminalOntology.STARTNEWCONTAINERHOLDER_TO_BE_ADDED,containerHolderSchema,ObjectSchema.OPTIONAL);
			startNewContainerHolderSchema.add(ContainerTerminalOntology.STARTNEWCONTAINERHOLDER_NAME,(TermSchema) this.getSchema(BasicOntology.STRING),ObjectSchema.OPTIONAL);
			provideOntologyRepresentationSchema.add(ContainerTerminalOntology.PROVIDEONTOLOGYREPRESENTATION_ACCORDING_ONTREP,containerHolderSchema,ObjectSchema.OPTIONAL);
			rejectLoadOfferSchema.add(ContainerTerminalOntology.REJECTLOADOFFER_LOAD_OFFER,transportOrderChainSchema,ObjectSchema.OPTIONAL);
			acceptLoadOfferSchema.add(ContainerTerminalOntology.ACCEPTLOADOFFER_LOAD_OFFER,transportOrderChainSchema,ObjectSchema.OPTIONAL);
			callForProposalsOnLoadStageSchema.add(ContainerTerminalOntology.CALLFORPROPOSALSONLOADSTAGE_REQUIRED_TURNOVER_CAPACITY,loadListSchema,ObjectSchema.OPTIONAL);
			proposeLoadOfferSchema.add(ContainerTerminalOntology.PROPOSELOADOFFER_LOAD_OFFER,transportOrderChainSchema,ObjectSchema.OPTIONAL);
			provideHarbourSetupSchema.add(ContainerTerminalOntology.PROVIDEHARBOURSETUP_CURRENT_HARBOUR_LAYOUT,domainSchema,ObjectSchema.OPTIONAL);
			provideHarbourSetupSchema.add(ContainerTerminalOntology.PROVIDEHARBOURSETUP_CURRENTLY_ACTIVE_CONTAINER_HOLDERS,containerHolderSchema,0,ObjectSchema.UNLIMITED);
			requestOntologyRepresentationSchema.add(ContainerTerminalOntology.REQUESTONTOLOGYREPRESENTATION_AGENT_IN_QUESTION,(ConceptSchema) this.getSchema(BasicOntology.AID),ObjectSchema.OPTIONAL);
			requestPopulatedBayMapSchema.add(ContainerTerminalOntology.REQUESTPOPULATEDBAYMAP_POPULATE_ON,bayMapSchema,ObjectSchema.OPTIONAL);
			requestExecuteLoadSequenceSchema.add(ContainerTerminalOntology.REQUESTEXECUTELOADSEQUENCE_NEXT_STEP,loadListSchema,ObjectSchema.OPTIONAL);
			requestRandomLoadSequenceSchema.add(ContainerTerminalOntology.REQUESTRANDOMLOADSEQUENCE_PROVIDES,bayMapSchema,ObjectSchema.OPTIONAL);
			provideRandomLoadSequenceSchema.add(ContainerTerminalOntology.PROVIDERANDOMLOADSEQUENCE_NEXT_STEP,loadListSchema,ObjectSchema.OPTIONAL);
			provideBayMapSchema.add(ContainerTerminalOntology.PROVIDEBAYMAP_PROVIDES,bayMapSchema,ObjectSchema.OPTIONAL);
			assignHarborQuaySchema.add(ContainerTerminalOntology.ASSIGNHARBORQUAY_ASSIGNED_QUAY,quaySchema,ObjectSchema.OPTIONAL);
			assignHarborQuaySchema.add(ContainerTerminalOntology.ASSIGNHARBORQUAY_AVAILABLE_CRANES,(ConceptSchema) this.getSchema(BasicOntology.AID),0,ObjectSchema.UNLIMITED);
			requestRandomBayMapSchema.add(ContainerTerminalOntology.REQUESTRANDOMBAYMAP_Y_DIMENSION,(TermSchema) this.getSchema(BasicOntology.INTEGER),ObjectSchema.OPTIONAL);
			requestRandomBayMapSchema.add(ContainerTerminalOntology.REQUESTRANDOMBAYMAP_Z_DIMENSION,(TermSchema) this.getSchema(BasicOntology.INTEGER),ObjectSchema.OPTIONAL);
			requestRandomBayMapSchema.add(ContainerTerminalOntology.REQUESTRANDOMBAYMAP_X_DIMENSION,(TermSchema) this.getSchema(BasicOntology.INTEGER),ObjectSchema.OPTIONAL);
			providePopulatedBayMapSchema.add(ContainerTerminalOntology.PROVIDEPOPULATEDBAYMAP_PROVIDES,bayMapSchema,ObjectSchema.OPTIONAL);
			containerHolderSchema.add(ContainerTerminalOntology.CONTAINERHOLDER_CONTRACTORS,(ConceptSchema) this.getSchema(BasicOntology.AID),0,ObjectSchema.UNLIMITED);
			containerHolderSchema.add(ContainerTerminalOntology.CONTAINERHOLDER_LIVES_IN,domainSchema,ObjectSchema.OPTIONAL);
			containerHolderSchema.add(ContainerTerminalOntology.CONTAINERHOLDER_LOCALNAME,(TermSchema) this.getSchema(BasicOntology.STRING),ObjectSchema.OPTIONAL);
			containerHolderSchema.add(ContainerTerminalOntology.CONTAINERHOLDER_CONTAINS,bayMapSchema,ObjectSchema.OPTIONAL);
			containerHolderSchema.add(ContainerTerminalOntology.CONTAINERHOLDER_SERVICE_TYPE,(TermSchema) this.getSchema(BasicOntology.STRING),ObjectSchema.OPTIONAL);
			containerHolderSchema.add(ContainerTerminalOntology.CONTAINERHOLDER_CONTAINER_STATES,tocHasStateSchema,0,ObjectSchema.UNLIMITED);
			shipSchema.add(ContainerTerminalOntology.SHIP_LENGTH,(TermSchema) this.getSchema(BasicOntology.FLOAT),ObjectSchema.OPTIONAL);
			activeContainerHolderSchema.add(ContainerTerminalOntology.ACTIVECONTAINERHOLDER_CAPABLE_OF,domainSchema,0,ObjectSchema.UNLIMITED);

			// adding name mappings

			// adding inheritance
			landSchema.addSuperSchema(domainSchema);
			seaSchema.addSuperSchema(domainSchema);
			proposedForSchema.addSuperSchema(transportOrderChainStateSchema);
			twentyFootContainerSchema.addSuperSchema(containerSchema);
			apronAreaSchema.addSuperSchema(domainSchema);
			administeredSchema.addSuperSchema(transportOrderChainStateSchema);
			pendingForSubCFPSchema.addSuperSchema(transportOrderChainStateSchema);
			berthSchema.addSuperSchema(domainSchema);
			announcedSchema.addSuperSchema(transportOrderChainStateSchema);
			railSchema.addSuperSchema(domainSchema);
			failedSchema.addSuperSchema(transportOrderChainStateSchema);
			streetSchema.addSuperSchema(domainSchema);
			yardAreaSchema.addSuperSchema(domainSchema);
			harbourSchema.addSuperSchema(domainSchema);
			quaySchema.addSuperSchema(domainSchema);
			yardSchema.addSuperSchema(staticContainerHolderSchema);
			rmgSchema.addSuperSchema(activeContainerHolderSchema);
			straddleCarrierSchema.addSuperSchema(activeContainerHolderSchema);
			trainSchema.addSuperSchema(staticContainerHolderSchema);
			staticContainerHolderSchema.addSuperSchema(containerHolderSchema);
			shipSchema.addSuperSchema(staticContainerHolderSchema);
			agvSchema.addSuperSchema(passiveContainerHolderSchema);
			passiveContainerHolderSchema.addSuperSchema(containerHolderSchema);
			activeContainerHolderSchema.addSuperSchema(containerHolderSchema);
			apronSchema.addSuperSchema(staticContainerHolderSchema);
			craneSchema.addSuperSchema(activeContainerHolderSchema);

		}catch(java.lang.Exception e){
			e.printStackTrace();
		}
	}
}
