// file: PlatformOntology.java generated by ontology bean generator.  DO NOT EDIT, UNLESS YOU ARE REALLY SURE WHAT YOU ARE DOING!
package game_of_life.ontology;

import jade.content.onto.*;
import jade.content.schema.*;
import jade.util.leap.HashMap;
import jade.content.lang.Codec;
import jade.core.CaseInsensitiveString;

/** file: PlatformOntology.java
 * @author ontology bean generator
 * @version 2010/08/31, 16:02:20
 */
public class PlatformOntology extends jade.content.onto.Ontology  {
  //NAME
  public static final String ONTOLOGY_NAME = "platform";
  // The singleton instance of this ontology
  private static ReflectiveIntrospector introspect = new ReflectiveIntrospector();
  private static Ontology theInstance = new PlatformOntology();
  public static Ontology getInstance() {
     return theInstance;
  }


   // VOCABULARY
    public static final String PLATFORM_PLATFORMINFO="PlatformInfo";
    public static final String PLATFORM="Platform";
    public static final String PLATFORMINFO_REMOTECONTAINERNAME="remoteContainerName";
    public static final String PLATFORMINFO_REMOTECONTAINERURL="remoteContainerURL";
    public static final String PLATFORMINFO_CURRENTCPUIDLETIME="currentCpuIdleTime";
    public static final String PLATFORMINFO_TOTALMEMORY="totalMemory";
    public static final String PLATFORMINFO_USEMEMORY="useMemory";
    public static final String PLATFORMINFO_NUMBEROFAGENTS="numberOfAgents";
    public static final String PLATFORMINFO_CURRENTFREEMEMORY="currentFreeMemory";
    public static final String PLATFORMINFO_LOCALCONTAINERURL="localContainerURL";
    public static final String PLATFORMINFO_THRESHOLDEXCEEDED="thresholdExceeded";
    public static final String PLATFORMINFO="PlatformInfo";

  /**
   * Constructor
  */
  private PlatformOntology(){ 
    super(ONTOLOGY_NAME, BasicOntology.getInstance());
    try { 

    // adding Concept(s)
    ConceptSchema platformInfoSchema = new ConceptSchema(PLATFORMINFO);
    add(platformInfoSchema, game_of_life.ontology.PlatformInfo.class);

    // adding AgentAction(s)

    // adding AID(s)

    // adding Predicate(s)
    PredicateSchema platformSchema = new PredicateSchema(PLATFORM);
    add(platformSchema, game_of_life.ontology.Platform.class);


    // adding fields
    platformInfoSchema.add(PLATFORMINFO_THRESHOLDEXCEEDED, (TermSchema)getSchema(BasicOntology.BOOLEAN), ObjectSchema.OPTIONAL);
    platformInfoSchema.add(PLATFORMINFO_LOCALCONTAINERURL, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    platformInfoSchema.add(PLATFORMINFO_CURRENTFREEMEMORY, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    platformInfoSchema.add(PLATFORMINFO_NUMBEROFAGENTS, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    platformInfoSchema.add(PLATFORMINFO_USEMEMORY, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    platformInfoSchema.add(PLATFORMINFO_TOTALMEMORY, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    platformInfoSchema.add(PLATFORMINFO_CURRENTCPUIDLETIME, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    platformInfoSchema.add(PLATFORMINFO_REMOTECONTAINERURL, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    platformInfoSchema.add(PLATFORMINFO_REMOTECONTAINERNAME, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    platformSchema.add(PLATFORM_PLATFORMINFO, platformInfoSchema, ObjectSchema.OPTIONAL);

    // adding name mappings

    // adding inheritance

   }catch (java.lang.Exception e) {e.printStackTrace();}
  }
  }
