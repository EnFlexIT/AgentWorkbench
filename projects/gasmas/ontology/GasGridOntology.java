// file: GasGridOntology.java generated by ontology bean generator.  DO NOT EDIT, UNLESS YOU ARE REALLY SURE WHAT YOU ARE DOING!
package gasmas.ontology;

import jade.content.onto.*;
import jade.content.schema.*;
import jade.util.leap.HashMap;
import jade.content.lang.Codec;
import jade.core.CaseInsensitiveString;

/** file: GasGridOntology.java
 * @author ontology bean generator
 * @version 2013/02/19, 16:35:18
 */
public class GasGridOntology extends jade.content.onto.Ontology  {
  //NAME
  public static final String ONTOLOGY_NAME = "GasGrid";
  // The singleton instance of this ontology
  private static ReflectiveIntrospector introspect = new ReflectiveIntrospector();
  private static Ontology theInstance = new GasGridOntology();
  public static Ontology getInstance() {
     return theInstance;
  }


   // VOCABULARY
    public static final String NOTIFICATION_REASON="reason";
    public static final String NOTIFICATION_NOTIFICATIONOBJECT="notificationObject";
    public static final String NOTIFICATION="Notification";
    public static final String CLUSTERNOTIFICATION="ClusterNotification";
    public static final String DIRECTIONSETTINGNOTIFICATION="DirectionSettingNotification";
    public static final String COMPSTATTCMEASUREMENT_SPEED="speed";
    public static final String COMPSTATTCMEASUREMENT_ADIABATICHEAD="adiabaticHead";
    public static final String COMPSTATTCMEASUREMENT_VOLUMETRICFLOWRATE="volumetricFlowrate";
    public static final String COMPSTATTCMEASUREMENT="CompStatTcMeasurement";
    public static final String GASANALYSIS_GASCOMPONENTS="gasComponents";
    public static final String GASANALYSIS="GasAnalysis";
    public static final String COMPSTATSTAGE_COMPRESSOR="compressor";
    public static final String COMPSTATSTAGE_NOOFPARALLELUNITS="noOfParallelUnits";
    public static final String COMPSTATSTAGE_STAGENO="stageNo";
    public static final String COMPSTATSTAGE="CompStatStage";
    public static final String ENTRY_GASTEMPERATURE="gasTemperature";
    public static final String ENTRY_PSEUDOCRITICALTEMPERATURE="pseudocriticalTemperature";
    public static final String ENTRY_MOLARMASS="molarMass";
    public static final String ENTRY_NORMDENSITY="normDensity";
    public static final String ENTRY_PSEUDOCRICALPRESSURE="pseudocricalPressure";
    public static final String ENTRY_CALORIFICVALUE="calorificValue";
    public static final String ENTRY_HEATCAPACITYCOEFFICIENT="heatCapacityCoefficient";
    public static final String ENTRY="Entry";
    public static final String EXIT_FLOWMIN="flowMin";
    public static final String EXIT_FLOWMAX="flowMax";
    public static final String EXIT="Exit";
    public static final String INNODE_PRESSUREMAX="pressureMax";
    public static final String INNODE_PRESSUREMIN="pressureMin";
    public static final String INNODE_HEIGHT="height";
    public static final String INNODE_GEOCOORDINATE="geoCoordinate";
    public static final String INNODE="Innode";
    public static final String GRIDCOMPONENT_ALIAS="alias";
    public static final String GRIDCOMPONENT_ID="ID";
    public static final String GRIDCOMPONENT="GridComponent";
    public static final String PIPE_PRESSUREMAX="pressureMax";
    public static final String PIPE_DIAMETER="Diameter";
    public static final String PIPE_LENGTH="Length";
    public static final String PIPE_HEATTRANSFERCOEFFICIENT="heatTransferCoefficient";
    public static final String PIPE_ROUGHNESS="roughness";
    public static final String PIPE_LINEOFSIGHT="lineOfSight";
    public static final String PIPE="Pipe";
    public static final String SHORTPIPE="ShortPipe";
    public static final String CONNECTION_FLOWMIN="flowMin";
    public static final String CONNECTION_FROM="from";
    public static final String CONNECTION_TO="to";
    public static final String CONNECTION_CURRENTFLOW="currentFlow";
    public static final String CONNECTION_FLOWMAX="flowMax";
    public static final String CONNECTION="Connection";
    public static final String STORAGE="Storage";
    public static final String VALUETYPE_UNIT="Unit";
    public static final String VALUETYPE_VALUE="Value";
    public static final String VALUETYPE="ValueType";
    public static final String CONTROLVALVE_DRAGFACTOROUT="dragFactorOut";
    public static final String CONTROLVALVE_PRESSUREOUTMAX="pressureOutMax";
    public static final String CONTROLVALVE_PRESSURESET="pressureSet";
    public static final String CONTROLVALVE_INCREASEDOUTPUTTEMPERATURE="increasedOutputTemperature";
    public static final String CONTROLVALVE_DIAMETERIN="diameterIn";
    public static final String CONTROLVALVE_PRESSUREINMIN="pressureInMin";
    public static final String CONTROLVALVE_INTERNALBYPASSREQUIRED="internalBypassRequired";
    public static final String CONTROLVALVE_DIAMETEROUT="diameterOut";
    public static final String CONTROLVALVE_DRAGFACTORIN="dragFactorIn";
    public static final String CONTROLVALVE_GASPREHEHEATEREXISTING="gasPreheheaterExisting";
    public static final String CONTROLVALVE_PRESSUREDIFFERENTIALMIN="pressureDifferentialMin";
    public static final String CONTROLVALVE="ControlValve";
    public static final String COMPRESSOR_GASCOOLEREXISTING="gasCoolerExisting";
    public static final String COMPRESSOR_PRESSURELOSSOUT="pressureLossOut";
    public static final String COMPRESSOR_COOLEDOUTPUTTEMPERATURE="cooledOutputTemperature";
    public static final String COMPRESSOR_INTERNALBYPASSREQUIRED="internalBypassRequired";
    public static final String COMPRESSOR_DIAMETEROUT="diameterOut";
    public static final String COMPRESSOR_VALUE="value";
    public static final String COMPRESSOR_DRAGFACTOROUT="dragFactorOut";
    public static final String COMPRESSOR_PRESSUREOUTMAX="pressureOutMax";
    public static final String COMPRESSOR_DIAMETERIN="diameterIn";
    public static final String COMPRESSOR_PRESSUREINMIN="pressureInMin";
    public static final String COMPRESSOR_DRAGFACTORIN="dragFactorIn";
    public static final String COMPRESSOR_PRESSURELOSSIN="pressureLossIn";
    public static final String COMPRESSOR_FLOWDIRECTION="flowDirection";
    public static final String COMPRESSOR_FUELGASVERTEX="fuelGasVertex";
    public static final String COMPRESSOR="Compressor";
    public static final String RESISTOR_DRAGFACTOR="dragFactor";
    public static final String RESISTOR_DIAMETER="Diameter";
    public static final String RESISTOR_PRESSURELOSS="pressureLoss";
    public static final String RESISTOR="Resistor";
    public static final String VALVE_PRESSUREDIFFERENTIALMAX="pressureDifferentialMax";
    public static final String VALVE_VALUE="value";
    public static final String VALVE_FLOWDIRECTION="flowDirection";
    public static final String VALVE="Valve";
    public static final String TURBOCOMPRESSOR_CHARACTERISTICDIAGRAMMEASUREMENTS="characteristicDiagramMeasurements";
    public static final String TURBOCOMPRESSOR_EFFICIENCYOFCHOKELINE="efficiencyOfChokeline";
    public static final String TURBOCOMPRESSOR_SURGELINE_COEFF="surgeline_coeff";
    public static final String TURBOCOMPRESSOR_SETTLELINEMEASUREMENTS="settlelineMeasurements";
    public static final String TURBOCOMPRESSOR_CHOKELINE_COEFF="chokeline_coeff";
    public static final String TURBOCOMPRESSOR_N_ISOLINE_COEFF="n_isoline_coeff";
    public static final String TURBOCOMPRESSOR_ETA_AD_ISOLINE_COEFF="eta_ad_isoline_coeff";
    public static final String TURBOCOMPRESSOR="TurboCompressor";
    public static final String PISTONCOMPRESSOR_ADDITIONALREDUCTIONVOLFLOW="additionalReductionVolFlow";
    public static final String PISTONCOMPRESSOR_ADIABATICEFFICIENCYPISTON="adiabaticEfficiencyPiston";
    public static final String PISTONCOMPRESSOR_MAXIMALCOMPRESSIONRATIO="maximalCompressionRatio";
    public static final String PISTONCOMPRESSOR_MAXIMALTORQUE="maximalTorque";
    public static final String PISTONCOMPRESSOR_OPERATINGVOLUME="operatingVolume";
    public static final String PISTONCOMPRESSOR="PistonCompressor";
    public static final String BRANCH="Branch";
    public static final String FLOWPARAMETERS_REYNOLDSNUMBER="reynoldsNumber";
    public static final String FLOWPARAMETERS_TEMPERATURE="temperature";
    public static final String FLOWPARAMETERS_MASSFLOW="massFlow";
    public static final String FLOWPARAMETERS_FLOW="flow";
    public static final String FLOWPARAMETERS_PRESSURE="pressure";
    public static final String FLOWPARAMETERS_FLUIDVELOCITY="fluidVelocity";
    public static final String FLOWPARAMETERS="FlowParameters";
    public static final String COMPSTAT_PISTONCOMPRESSOR="pistonCompressor";
    public static final String COMPSTAT_CONFIGURATIONS="configurations";
    public static final String COMPSTAT_GASTURBINES="gasturbines";
    public static final String COMPSTAT_GASDRIVENMOTORS="gasDrivenMotors";
    public static final String COMPSTAT_TURBOCOMPRESSOR="turboCompressor";
    public static final String COMPSTAT_ELECTRICMOTORS="electricMotors";
    public static final String COMPSTAT_STEAMTURBINES="steamTurbines";
    public static final String COMPSTAT_UPGRADECOSTS="upgradeCosts";
    public static final String COMPSTAT_BUILDINGCOSTS="buildingCosts";
    public static final String COMPSTAT="CompStat";
    public static final String ELECTRICMOTOR_EMMAXIMALPOWERMEASUREMENTS="emMaximalPowerMeasurements";
    public static final String ELECTRICMOTOR_EMSPECIFICENERGYCONSUMPTIONMEASUREMENTS="emSpecificEnergyConsumptionMeasurements";
    public static final String ELECTRICMOTOR_EMPOWERFUNCOEFF="emPowerFunCoeff";
    public static final String ELECTRICMOTOR="ElectricMotor";
    public static final String STEAMTURBINE_EXPLICIT="explicit";
    public static final String STEAMTURBINE_POWERMAX="powerMax";
    public static final String STEAMTURBINE_POWERMIN="powerMin";
    public static final String STEAMTURBINE="SteamTurbine";
    public static final String GASTURBINE_GTMAXIMALPOWERMEASUREMENTS="gtMaximalPowerMeasurements";
    public static final String GASTURBINE_GTSPECIFICENERGYCONSUMPTIONMEASUREMENTS="gtSpecificEnergyConsumptionMeasurements";
    public static final String GASTURBINE_GTPOWERFUNCOEFF="gtPowerFunCoeff";
    public static final String GASTURBINE="GasTurbine";
    public static final String COMPSTATDRIVE_ENERGYRATEFUNCOEFF="energyRateFunCoeff";
    public static final String COMPSTATDRIVE="CompStatDrive";
    public static final String GASDRIVENMOTOR_GMMAXIMALPOWERMEASUREMENTS="gmMaximalPowerMeasurements";
    public static final String GASDRIVENMOTOR_GMSPECIFICENERGYCONSUMPTIONMEASUREMENTS="gmSpecificEnergyConsumptionMeasurements";
    public static final String GASDRIVENMOTOR_GMPOWERFUNCOEFF="gmPowerFunCoeff";
    public static final String GASDRIVENMOTOR="GasDrivenMotor";
    public static final String COMPSTATCOMPRESSOR_SPEEDMIN="speedMin";
    public static final String COMPSTATCOMPRESSOR_SPEEDMAX="speedMax";
    public static final String COMPSTATCOMPRESSOR_DRIVE="drive";
    public static final String COMPSTATCOMPRESSOR="CompStatCompressor";
    public static final String COMPSTATCALCCOEFFICIENT="CompStatCalcCoefficient";
    public static final String COMPSTATMAXPTOAMBIENTTEMPERATURE_TEMPERATUREMP="temperatureMP";
    public static final String COMPSTATMAXPTOAMBIENTTEMPERATURE_MEASUREMENTSMP="measurementsMP";
    public static final String COMPSTATMAXPTOAMBIENTTEMPERATURE="CompStatMaxPtoAmbientTemperature";
    public static final String CALC3PARAMETER_COEFF_1_3="coeff_1_3";
    public static final String CALC3PARAMETER_COEFF_3_3="coeff_3_3";
    public static final String CALC3PARAMETER_COEFF_2_3="coeff_2_3";
    public static final String CALC3PARAMETER="Calc3Parameter";
    public static final String COMPSTATMAXPMEASURMENT_SPEEMP="speeMP";
    public static final String COMPSTATMAXPMEASURMENT_MAXIMALPOWER="maximalPower";
    public static final String COMPSTATMAXPMEASURMENT="CompStatMaxPmeasurment";
    public static final String COMPSTATCONFIGURATION_NROFSERIALSTAGES="nrOfSerialStages";
    public static final String COMPSTATCONFIGURATION_CONFID="confID";
    public static final String COMPSTATCONFIGURATION_STAGES="stages";
    public static final String COMPSTATCONFIGURATION="CompStatConfiguration";
    public static final String CALC9PARAMETER_COEFF_9_9="coeff_9_9";
    public static final String CALC9PARAMETER_COEFF_2_9="coeff_2_9";
    public static final String CALC9PARAMETER_COEFF_3_9="coeff_3_9";
    public static final String CALC9PARAMETER_COEFF_8_9="coeff_8_9";
    public static final String CALC9PARAMETER_COEFF_7_9="coeff_7_9";
    public static final String CALC9PARAMETER_COEFF_6_9="coeff_6_9";
    public static final String CALC9PARAMETER_COEFF_1_9="coeff_1_9";
    public static final String CALC9PARAMETER_COEFF_4_9="coeff_4_9";
    public static final String CALC9PARAMETER_COEFF_5_9="coeff_5_9";
    public static final String CALC9PARAMETER="Calc9Parameter";
    public static final String FLUIDPARAMETERS_DENSITY="density";
    public static final String FLUIDPARAMETERS_KINEMATICVISCOSITY="kinematicViscosity";
    public static final String FLUIDPARAMETERS_DYNAMICVISCOSITY="dynamicViscosity";
    public static final String FLUIDPARAMETERS_THERMALCONDUCTIVITY="thermalConductivity";
    public static final String FLUIDPARAMETERS="FluidParameters";
    public static final String COMPSTATSECMEASURMENT_COMRESSORPOWER="comressorPower";
    public static final String COMPSTATSECMEASURMENT_FUELCONSUMPTION="fuelConsumption";
    public static final String COMPSTATSECMEASURMENT="CompStatSECmeasurment";
    public static final String HEATCAPACITYCOEFFICIENT_B="b";
    public static final String HEATCAPACITYCOEFFICIENT_A="a";
    public static final String HEATCAPACITYCOEFFICIENT_C="c";
    public static final String HEATCAPACITYCOEFFICIENT="HeatCapacityCoefficient";
    public static final String COMPSTATADIABATICEFFICIENCY_MEASUREMENTS="measurements";
    public static final String COMPSTATADIABATICEFFICIENCY_ADIABATICEFFICIENCY="adiabaticEfficiency";
    public static final String COMPSTATADIABATICEFFICIENCY="CompStatAdiabaticEfficiency";
    public static final String COMPSTATCOMPRESSORSPEED_NOMINALSPEED="nominalSpeed";
    public static final String COMPSTATCOMPRESSORSPEED="CompStatCompressorSpeed";
    public static final String COMPSTATMP_AMBIENTTEMPERATURE="ambientTemperature";
    public static final String COMPSTATMP_MEASUREMENTSTYPE="measurementsType";
    public static final String COMPSTATMP="CompStatMP";
    public static final String GEOCOORDINATE_GEOY="geoY";
    public static final String GEOCOORDINATE_GEOZ="geoZ";
    public static final String GEOCOORDINATE_GEOW="geoW";
    public static final String GEOCOORDINATE_GEOX="geoX";
    public static final String GEOCOORDINATE="GeoCoordinate";

  /**
   * Constructor
  */
  private GasGridOntology(){ 
    super(ONTOLOGY_NAME, BasicOntology.getInstance());
    try { 

    // adding Concept(s)
    ConceptSchema geoCoordinateSchema = new ConceptSchema(GEOCOORDINATE);
    add(geoCoordinateSchema, gasmas.ontology.GeoCoordinate.class);
    ConceptSchema compStatMPSchema = new ConceptSchema(COMPSTATMP);
    add(compStatMPSchema, gasmas.ontology.CompStatMP.class);
    ConceptSchema compStatCompressorSpeedSchema = new ConceptSchema(COMPSTATCOMPRESSORSPEED);
    add(compStatCompressorSpeedSchema, gasmas.ontology.CompStatCompressorSpeed.class);
    ConceptSchema compStatAdiabaticEfficiencySchema = new ConceptSchema(COMPSTATADIABATICEFFICIENCY);
    add(compStatAdiabaticEfficiencySchema, gasmas.ontology.CompStatAdiabaticEfficiency.class);
    ConceptSchema heatCapacityCoefficientSchema = new ConceptSchema(HEATCAPACITYCOEFFICIENT);
    add(heatCapacityCoefficientSchema, gasmas.ontology.HeatCapacityCoefficient.class);
    ConceptSchema compStatSECmeasurmentSchema = new ConceptSchema(COMPSTATSECMEASURMENT);
    add(compStatSECmeasurmentSchema, gasmas.ontology.CompStatSECmeasurment.class);
    ConceptSchema fluidParametersSchema = new ConceptSchema(FLUIDPARAMETERS);
    add(fluidParametersSchema, gasmas.ontology.FluidParameters.class);
    ConceptSchema calc9ParameterSchema = new ConceptSchema(CALC9PARAMETER);
    add(calc9ParameterSchema, gasmas.ontology.Calc9Parameter.class);
    ConceptSchema compStatConfigurationSchema = new ConceptSchema(COMPSTATCONFIGURATION);
    add(compStatConfigurationSchema, gasmas.ontology.CompStatConfiguration.class);
    ConceptSchema compStatMaxPmeasurmentSchema = new ConceptSchema(COMPSTATMAXPMEASURMENT);
    add(compStatMaxPmeasurmentSchema, gasmas.ontology.CompStatMaxPmeasurment.class);
    ConceptSchema calc3ParameterSchema = new ConceptSchema(CALC3PARAMETER);
    add(calc3ParameterSchema, gasmas.ontology.Calc3Parameter.class);
    ConceptSchema compStatMaxPtoAmbientTemperatureSchema = new ConceptSchema(COMPSTATMAXPTOAMBIENTTEMPERATURE);
    add(compStatMaxPtoAmbientTemperatureSchema, gasmas.ontology.CompStatMaxPtoAmbientTemperature.class);
    ConceptSchema compStatCalcCoefficientSchema = new ConceptSchema(COMPSTATCALCCOEFFICIENT);
    add(compStatCalcCoefficientSchema, gasmas.ontology.CompStatCalcCoefficient.class);
    ConceptSchema compStatCompressorSchema = new ConceptSchema(COMPSTATCOMPRESSOR);
    add(compStatCompressorSchema, gasmas.ontology.CompStatCompressor.class);
    ConceptSchema gasDrivenMotorSchema = new ConceptSchema(GASDRIVENMOTOR);
    add(gasDrivenMotorSchema, gasmas.ontology.GasDrivenMotor.class);
    ConceptSchema compStatDriveSchema = new ConceptSchema(COMPSTATDRIVE);
    add(compStatDriveSchema, gasmas.ontology.CompStatDrive.class);
    ConceptSchema gasTurbineSchema = new ConceptSchema(GASTURBINE);
    add(gasTurbineSchema, gasmas.ontology.GasTurbine.class);
    ConceptSchema steamTurbineSchema = new ConceptSchema(STEAMTURBINE);
    add(steamTurbineSchema, gasmas.ontology.SteamTurbine.class);
    ConceptSchema electricMotorSchema = new ConceptSchema(ELECTRICMOTOR);
    add(electricMotorSchema, gasmas.ontology.ElectricMotor.class);
    ConceptSchema compStatSchema = new ConceptSchema(COMPSTAT);
    add(compStatSchema, gasmas.ontology.CompStat.class);
    ConceptSchema flowParametersSchema = new ConceptSchema(FLOWPARAMETERS);
    add(flowParametersSchema, gasmas.ontology.FlowParameters.class);
    ConceptSchema branchSchema = new ConceptSchema(BRANCH);
    add(branchSchema, gasmas.ontology.Branch.class);
    ConceptSchema pistonCompressorSchema = new ConceptSchema(PISTONCOMPRESSOR);
    add(pistonCompressorSchema, gasmas.ontology.PistonCompressor.class);
    ConceptSchema turboCompressorSchema = new ConceptSchema(TURBOCOMPRESSOR);
    add(turboCompressorSchema, gasmas.ontology.TurboCompressor.class);
    ConceptSchema valveSchema = new ConceptSchema(VALVE);
    add(valveSchema, gasmas.ontology.Valve.class);
    ConceptSchema resistorSchema = new ConceptSchema(RESISTOR);
    add(resistorSchema, gasmas.ontology.Resistor.class);
    ConceptSchema compressorSchema = new ConceptSchema(COMPRESSOR);
    add(compressorSchema, gasmas.ontology.Compressor.class);
    ConceptSchema controlValveSchema = new ConceptSchema(CONTROLVALVE);
    add(controlValveSchema, gasmas.ontology.ControlValve.class);
    ConceptSchema valueTypeSchema = new ConceptSchema(VALUETYPE);
    add(valueTypeSchema, gasmas.ontology.ValueType.class);
    ConceptSchema storageSchema = new ConceptSchema(STORAGE);
    add(storageSchema, gasmas.ontology.Storage.class);
    ConceptSchema connectionSchema = new ConceptSchema(CONNECTION);
    add(connectionSchema, gasmas.ontology.Connection.class);
    ConceptSchema shortPipeSchema = new ConceptSchema(SHORTPIPE);
    add(shortPipeSchema, gasmas.ontology.ShortPipe.class);
    ConceptSchema pipeSchema = new ConceptSchema(PIPE);
    add(pipeSchema, gasmas.ontology.Pipe.class);
    ConceptSchema gridComponentSchema = new ConceptSchema(GRIDCOMPONENT);
    add(gridComponentSchema, gasmas.ontology.GridComponent.class);
    ConceptSchema innodeSchema = new ConceptSchema(INNODE);
    add(innodeSchema, gasmas.ontology.Innode.class);
    ConceptSchema exitSchema = new ConceptSchema(EXIT);
    add(exitSchema, gasmas.ontology.Exit.class);
    ConceptSchema entrySchema = new ConceptSchema(ENTRY);
    add(entrySchema, gasmas.ontology.Entry.class);
    ConceptSchema compStatStageSchema = new ConceptSchema(COMPSTATSTAGE);
    add(compStatStageSchema, gasmas.ontology.CompStatStage.class);
    ConceptSchema gasAnalysisSchema = new ConceptSchema(GASANALYSIS);
    add(gasAnalysisSchema, gasmas.ontology.GasAnalysis.class);
    ConceptSchema compStatTcMeasurementSchema = new ConceptSchema(COMPSTATTCMEASUREMENT);
    add(compStatTcMeasurementSchema, gasmas.ontology.CompStatTcMeasurement.class);

    // adding AgentAction(s)
    AgentActionSchema directionSettingNotificationSchema = new AgentActionSchema(DIRECTIONSETTINGNOTIFICATION);
    add(directionSettingNotificationSchema, gasmas.ontology.DirectionSettingNotification.class);
    AgentActionSchema clusterNotificationSchema = new AgentActionSchema(CLUSTERNOTIFICATION);
    add(clusterNotificationSchema, gasmas.ontology.ClusterNotification.class);
    AgentActionSchema notificationSchema = new AgentActionSchema(NOTIFICATION);
    add(notificationSchema, gasmas.ontology.Notification.class);

    // adding AID(s)

    // adding Predicate(s)


    // adding fields
    geoCoordinateSchema.add(GEOCOORDINATE_GEOX, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    geoCoordinateSchema.add(GEOCOORDINATE_GEOW, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    geoCoordinateSchema.add(GEOCOORDINATE_GEOZ, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    geoCoordinateSchema.add(GEOCOORDINATE_GEOY, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    compStatMPSchema.add(COMPSTATMP_MEASUREMENTSTYPE, compStatMaxPmeasurmentSchema, 0, ObjectSchema.UNLIMITED);
    compStatMPSchema.add(COMPSTATMP_AMBIENTTEMPERATURE, compStatMaxPtoAmbientTemperatureSchema, 0, ObjectSchema.UNLIMITED);
    compStatCompressorSpeedSchema.add(COMPSTATCOMPRESSORSPEED_NOMINALSPEED, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    compStatAdiabaticEfficiencySchema.add(COMPSTATADIABATICEFFICIENCY_ADIABATICEFFICIENCY, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    compStatAdiabaticEfficiencySchema.add(COMPSTATADIABATICEFFICIENCY_MEASUREMENTS, compStatTcMeasurementSchema, 0, ObjectSchema.UNLIMITED);
    heatCapacityCoefficientSchema.add(HEATCAPACITYCOEFFICIENT_C, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    heatCapacityCoefficientSchema.add(HEATCAPACITYCOEFFICIENT_A, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    heatCapacityCoefficientSchema.add(HEATCAPACITYCOEFFICIENT_B, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    compStatSECmeasurmentSchema.add(COMPSTATSECMEASURMENT_FUELCONSUMPTION, valueTypeSchema, ObjectSchema.OPTIONAL);
    compStatSECmeasurmentSchema.add(COMPSTATSECMEASURMENT_COMRESSORPOWER, valueTypeSchema, ObjectSchema.OPTIONAL);
    fluidParametersSchema.add(FLUIDPARAMETERS_THERMALCONDUCTIVITY, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    fluidParametersSchema.add(FLUIDPARAMETERS_DYNAMICVISCOSITY, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    fluidParametersSchema.add(FLUIDPARAMETERS_KINEMATICVISCOSITY, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    fluidParametersSchema.add(FLUIDPARAMETERS_DENSITY, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    calc9ParameterSchema.add(CALC9PARAMETER_COEFF_5_9, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    calc9ParameterSchema.add(CALC9PARAMETER_COEFF_4_9, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    calc9ParameterSchema.add(CALC9PARAMETER_COEFF_1_9, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    calc9ParameterSchema.add(CALC9PARAMETER_COEFF_6_9, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    calc9ParameterSchema.add(CALC9PARAMETER_COEFF_7_9, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    calc9ParameterSchema.add(CALC9PARAMETER_COEFF_8_9, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    calc9ParameterSchema.add(CALC9PARAMETER_COEFF_3_9, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    calc9ParameterSchema.add(CALC9PARAMETER_COEFF_2_9, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    calc9ParameterSchema.add(CALC9PARAMETER_COEFF_9_9, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    compStatConfigurationSchema.add(COMPSTATCONFIGURATION_STAGES, compStatStageSchema, 0, ObjectSchema.UNLIMITED);
    compStatConfigurationSchema.add(COMPSTATCONFIGURATION_CONFID, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    compStatConfigurationSchema.add(COMPSTATCONFIGURATION_NROFSERIALSTAGES, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    compStatMaxPmeasurmentSchema.add(COMPSTATMAXPMEASURMENT_MAXIMALPOWER, valueTypeSchema, ObjectSchema.OPTIONAL);
    compStatMaxPmeasurmentSchema.add(COMPSTATMAXPMEASURMENT_SPEEMP, valueTypeSchema, ObjectSchema.OPTIONAL);
    calc3ParameterSchema.add(CALC3PARAMETER_COEFF_2_3, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    calc3ParameterSchema.add(CALC3PARAMETER_COEFF_3_3, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    calc3ParameterSchema.add(CALC3PARAMETER_COEFF_1_3, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    compStatMaxPtoAmbientTemperatureSchema.add(COMPSTATMAXPTOAMBIENTTEMPERATURE_MEASUREMENTSMP, compStatMaxPmeasurmentSchema, 0, ObjectSchema.UNLIMITED);
    compStatMaxPtoAmbientTemperatureSchema.add(COMPSTATMAXPTOAMBIENTTEMPERATURE_TEMPERATUREMP, valueTypeSchema, ObjectSchema.OPTIONAL);
    compStatCompressorSchema.add(COMPSTATCOMPRESSOR_DRIVE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    compStatCompressorSchema.add(COMPSTATCOMPRESSOR_SPEEDMAX, valueTypeSchema, ObjectSchema.OPTIONAL);
    compStatCompressorSchema.add(COMPSTATCOMPRESSOR_SPEEDMIN, valueTypeSchema, ObjectSchema.OPTIONAL);
    gasDrivenMotorSchema.add(GASDRIVENMOTOR_GMPOWERFUNCOEFF, calc3ParameterSchema, ObjectSchema.OPTIONAL);
    gasDrivenMotorSchema.add(GASDRIVENMOTOR_GMSPECIFICENERGYCONSUMPTIONMEASUREMENTS, compStatSECmeasurmentSchema, 0, ObjectSchema.UNLIMITED);
    gasDrivenMotorSchema.add(GASDRIVENMOTOR_GMMAXIMALPOWERMEASUREMENTS, compStatMaxPmeasurmentSchema, 0, ObjectSchema.UNLIMITED);
    compStatDriveSchema.add(COMPSTATDRIVE_ENERGYRATEFUNCOEFF, calc3ParameterSchema, ObjectSchema.OPTIONAL);
    gasTurbineSchema.add(GASTURBINE_GTPOWERFUNCOEFF, calc9ParameterSchema, ObjectSchema.OPTIONAL);
    gasTurbineSchema.add(GASTURBINE_GTSPECIFICENERGYCONSUMPTIONMEASUREMENTS, compStatSECmeasurmentSchema, 0, ObjectSchema.UNLIMITED);
    gasTurbineSchema.add(GASTURBINE_GTMAXIMALPOWERMEASUREMENTS, compStatMaxPtoAmbientTemperatureSchema, 0, ObjectSchema.UNLIMITED);
    steamTurbineSchema.add(STEAMTURBINE_POWERMIN, valueTypeSchema, ObjectSchema.OPTIONAL);
    steamTurbineSchema.add(STEAMTURBINE_POWERMAX, valueTypeSchema, ObjectSchema.OPTIONAL);
    steamTurbineSchema.add(STEAMTURBINE_EXPLICIT, (TermSchema)getSchema(BasicOntology.BOOLEAN), ObjectSchema.OPTIONAL);
    electricMotorSchema.add(ELECTRICMOTOR_EMPOWERFUNCOEFF, calc9ParameterSchema, ObjectSchema.OPTIONAL);
    electricMotorSchema.add(ELECTRICMOTOR_EMSPECIFICENERGYCONSUMPTIONMEASUREMENTS, compStatSECmeasurmentSchema, ObjectSchema.OPTIONAL);
    electricMotorSchema.add(ELECTRICMOTOR_EMMAXIMALPOWERMEASUREMENTS, compStatMPSchema, ObjectSchema.OPTIONAL);
    compStatSchema.add(COMPSTAT_BUILDINGCOSTS, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    compStatSchema.add(COMPSTAT_UPGRADECOSTS, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    compStatSchema.add(COMPSTAT_STEAMTURBINES, steamTurbineSchema, 0, ObjectSchema.UNLIMITED);
    compStatSchema.add(COMPSTAT_ELECTRICMOTORS, electricMotorSchema, 0, ObjectSchema.UNLIMITED);
    compStatSchema.add(COMPSTAT_TURBOCOMPRESSOR, turboCompressorSchema, 0, ObjectSchema.UNLIMITED);
    compStatSchema.add(COMPSTAT_GASDRIVENMOTORS, gasDrivenMotorSchema, 0, ObjectSchema.UNLIMITED);
    compStatSchema.add(COMPSTAT_GASTURBINES, gasTurbineSchema, 0, ObjectSchema.UNLIMITED);
    compStatSchema.add(COMPSTAT_CONFIGURATIONS, compStatConfigurationSchema, 0, ObjectSchema.UNLIMITED);
    compStatSchema.add(COMPSTAT_PISTONCOMPRESSOR, pistonCompressorSchema, 0, ObjectSchema.UNLIMITED);
    flowParametersSchema.add(FLOWPARAMETERS_FLUIDVELOCITY, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    flowParametersSchema.add(FLOWPARAMETERS_PRESSURE, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    flowParametersSchema.add(FLOWPARAMETERS_FLOW, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    flowParametersSchema.add(FLOWPARAMETERS_MASSFLOW, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    flowParametersSchema.add(FLOWPARAMETERS_TEMPERATURE, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    flowParametersSchema.add(FLOWPARAMETERS_REYNOLDSNUMBER, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    pistonCompressorSchema.add(PISTONCOMPRESSOR_OPERATINGVOLUME, valueTypeSchema, ObjectSchema.OPTIONAL);
    pistonCompressorSchema.add(PISTONCOMPRESSOR_MAXIMALTORQUE, valueTypeSchema, ObjectSchema.OPTIONAL);
    pistonCompressorSchema.add(PISTONCOMPRESSOR_MAXIMALCOMPRESSIONRATIO, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    pistonCompressorSchema.add(PISTONCOMPRESSOR_ADIABATICEFFICIENCYPISTON, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    pistonCompressorSchema.add(PISTONCOMPRESSOR_ADDITIONALREDUCTIONVOLFLOW, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    turboCompressorSchema.add(TURBOCOMPRESSOR_ETA_AD_ISOLINE_COEFF, calc9ParameterSchema, ObjectSchema.OPTIONAL);
    turboCompressorSchema.add(TURBOCOMPRESSOR_N_ISOLINE_COEFF, calc9ParameterSchema, ObjectSchema.OPTIONAL);
    turboCompressorSchema.add(TURBOCOMPRESSOR_CHOKELINE_COEFF, calc3ParameterSchema, ObjectSchema.OPTIONAL);
    turboCompressorSchema.add(TURBOCOMPRESSOR_SETTLELINEMEASUREMENTS, compStatTcMeasurementSchema, 0, ObjectSchema.UNLIMITED);
    turboCompressorSchema.add(TURBOCOMPRESSOR_SURGELINE_COEFF, calc3ParameterSchema, ObjectSchema.OPTIONAL);
    turboCompressorSchema.add(TURBOCOMPRESSOR_EFFICIENCYOFCHOKELINE, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    turboCompressorSchema.add(TURBOCOMPRESSOR_CHARACTERISTICDIAGRAMMEASUREMENTS, compStatAdiabaticEfficiencySchema, 0, ObjectSchema.UNLIMITED);
    valveSchema.add(VALVE_FLOWDIRECTION, (TermSchema)getSchema(BasicOntology.BOOLEAN), ObjectSchema.OPTIONAL);
    valveSchema.add(VALVE_VALUE, (TermSchema)getSchema(BasicOntology.BOOLEAN), ObjectSchema.OPTIONAL);
    valveSchema.add(VALVE_PRESSUREDIFFERENTIALMAX, valueTypeSchema, ObjectSchema.OPTIONAL);
    resistorSchema.add(RESISTOR_PRESSURELOSS, valueTypeSchema, ObjectSchema.OPTIONAL);
    resistorSchema.add(RESISTOR_DIAMETER, valueTypeSchema, ObjectSchema.OPTIONAL);
    resistorSchema.add(RESISTOR_DRAGFACTOR, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    compressorSchema.add(COMPRESSOR_FUELGASVERTEX, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    compressorSchema.add(COMPRESSOR_FLOWDIRECTION, (TermSchema)getSchema(BasicOntology.BOOLEAN), ObjectSchema.OPTIONAL);
    compressorSchema.add(COMPRESSOR_PRESSURELOSSIN, valueTypeSchema, ObjectSchema.OPTIONAL);
    compressorSchema.add(COMPRESSOR_DRAGFACTORIN, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    compressorSchema.add(COMPRESSOR_PRESSUREINMIN, valueTypeSchema, ObjectSchema.OPTIONAL);
    compressorSchema.add(COMPRESSOR_DIAMETERIN, valueTypeSchema, ObjectSchema.OPTIONAL);
    compressorSchema.add(COMPRESSOR_PRESSUREOUTMAX, valueTypeSchema, ObjectSchema.OPTIONAL);
    compressorSchema.add(COMPRESSOR_DRAGFACTOROUT, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    compressorSchema.add(COMPRESSOR_VALUE, (TermSchema)getSchema(BasicOntology.BOOLEAN), ObjectSchema.OPTIONAL);
    compressorSchema.add(COMPRESSOR_DIAMETEROUT, valueTypeSchema, ObjectSchema.OPTIONAL);
    compressorSchema.add(COMPRESSOR_INTERNALBYPASSREQUIRED, (TermSchema)getSchema(BasicOntology.BOOLEAN), ObjectSchema.OPTIONAL);
    compressorSchema.add(COMPRESSOR_COOLEDOUTPUTTEMPERATURE, valueTypeSchema, ObjectSchema.OPTIONAL);
    compressorSchema.add(COMPRESSOR_PRESSURELOSSOUT, valueTypeSchema, ObjectSchema.OPTIONAL);
    compressorSchema.add(COMPRESSOR_GASCOOLEREXISTING, (TermSchema)getSchema(BasicOntology.BOOLEAN), ObjectSchema.OPTIONAL);
    controlValveSchema.add(CONTROLVALVE_PRESSUREDIFFERENTIALMIN, valueTypeSchema, ObjectSchema.OPTIONAL);
    controlValveSchema.add(CONTROLVALVE_GASPREHEHEATEREXISTING, (TermSchema)getSchema(BasicOntology.BOOLEAN), ObjectSchema.OPTIONAL);
    controlValveSchema.add(CONTROLVALVE_DRAGFACTORIN, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    controlValveSchema.add(CONTROLVALVE_DIAMETEROUT, valueTypeSchema, ObjectSchema.OPTIONAL);
    controlValveSchema.add(CONTROLVALVE_INTERNALBYPASSREQUIRED, (TermSchema)getSchema(BasicOntology.BOOLEAN), ObjectSchema.OPTIONAL);
    controlValveSchema.add(CONTROLVALVE_PRESSUREINMIN, valueTypeSchema, ObjectSchema.OPTIONAL);
    controlValveSchema.add(CONTROLVALVE_DIAMETERIN, valueTypeSchema, ObjectSchema.OPTIONAL);
    controlValveSchema.add(CONTROLVALVE_INCREASEDOUTPUTTEMPERATURE, valueTypeSchema, ObjectSchema.OPTIONAL);
    controlValveSchema.add(CONTROLVALVE_PRESSURESET, valueTypeSchema, ObjectSchema.OPTIONAL);
    controlValveSchema.add(CONTROLVALVE_PRESSUREOUTMAX, valueTypeSchema, ObjectSchema.OPTIONAL);
    controlValveSchema.add(CONTROLVALVE_DRAGFACTOROUT, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    valueTypeSchema.add(VALUETYPE_VALUE, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    valueTypeSchema.add(VALUETYPE_UNIT, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    connectionSchema.add(CONNECTION_FLOWMAX, valueTypeSchema, ObjectSchema.OPTIONAL);
    connectionSchema.add(CONNECTION_CURRENTFLOW, flowParametersSchema, ObjectSchema.OPTIONAL);
    connectionSchema.add(CONNECTION_TO, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    connectionSchema.add(CONNECTION_FROM, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    connectionSchema.add(CONNECTION_FLOWMIN, valueTypeSchema, ObjectSchema.OPTIONAL);
    pipeSchema.add(PIPE_LINEOFSIGHT, valueTypeSchema, ObjectSchema.OPTIONAL);
    pipeSchema.add(PIPE_ROUGHNESS, valueTypeSchema, ObjectSchema.OPTIONAL);
    pipeSchema.add(PIPE_HEATTRANSFERCOEFFICIENT, valueTypeSchema, ObjectSchema.OPTIONAL);
    pipeSchema.add(PIPE_LENGTH, valueTypeSchema, ObjectSchema.OPTIONAL);
    pipeSchema.add(PIPE_DIAMETER, valueTypeSchema, ObjectSchema.OPTIONAL);
    pipeSchema.add(PIPE_PRESSUREMAX, valueTypeSchema, ObjectSchema.OPTIONAL);
    gridComponentSchema.add(GRIDCOMPONENT_ID, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    gridComponentSchema.add(GRIDCOMPONENT_ALIAS, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    innodeSchema.add(INNODE_GEOCOORDINATE, geoCoordinateSchema, ObjectSchema.OPTIONAL);
    innodeSchema.add(INNODE_HEIGHT, valueTypeSchema, ObjectSchema.OPTIONAL);
    innodeSchema.add(INNODE_PRESSUREMIN, valueTypeSchema, ObjectSchema.OPTIONAL);
    innodeSchema.add(INNODE_PRESSUREMAX, valueTypeSchema, ObjectSchema.OPTIONAL);
    exitSchema.add(EXIT_FLOWMAX, valueTypeSchema, ObjectSchema.OPTIONAL);
    exitSchema.add(EXIT_FLOWMIN, valueTypeSchema, ObjectSchema.OPTIONAL);
    entrySchema.add(ENTRY_HEATCAPACITYCOEFFICIENT, heatCapacityCoefficientSchema, ObjectSchema.OPTIONAL);
    entrySchema.add(ENTRY_CALORIFICVALUE, valueTypeSchema, ObjectSchema.OPTIONAL);
    entrySchema.add(ENTRY_PSEUDOCRICALPRESSURE, valueTypeSchema, ObjectSchema.OPTIONAL);
    entrySchema.add(ENTRY_NORMDENSITY, valueTypeSchema, ObjectSchema.OPTIONAL);
    entrySchema.add(ENTRY_MOLARMASS, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    entrySchema.add(ENTRY_PSEUDOCRITICALTEMPERATURE, valueTypeSchema, ObjectSchema.OPTIONAL);
    entrySchema.add(ENTRY_GASTEMPERATURE, valueTypeSchema, ObjectSchema.OPTIONAL);
    compStatStageSchema.add(COMPSTATSTAGE_STAGENO, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    compStatStageSchema.add(COMPSTATSTAGE_NOOFPARALLELUNITS, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    compStatStageSchema.add(COMPSTATSTAGE_COMPRESSOR, compStatCompressorSpeedSchema, 0, ObjectSchema.UNLIMITED);
    gasAnalysisSchema.add(GASANALYSIS_GASCOMPONENTS, (TermSchema)getSchema(BasicOntology.FLOAT), 0, ObjectSchema.UNLIMITED);
    compStatTcMeasurementSchema.add(COMPSTATTCMEASUREMENT_VOLUMETRICFLOWRATE, valueTypeSchema, ObjectSchema.OPTIONAL);
    compStatTcMeasurementSchema.add(COMPSTATTCMEASUREMENT_ADIABATICHEAD, valueTypeSchema, ObjectSchema.OPTIONAL);
    compStatTcMeasurementSchema.add(COMPSTATTCMEASUREMENT_SPEED, valueTypeSchema, ObjectSchema.OPTIONAL);
    notificationSchema.add(NOTIFICATION_NOTIFICATIONOBJECT, new ConceptSchema("Concept"), ObjectSchema.OPTIONAL);
    notificationSchema.add(NOTIFICATION_REASON, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);

    // adding name mappings

    // adding inheritance
    compStatCompressorSpeedSchema.addSuperSchema(gridComponentSchema);
    calc9ParameterSchema.addSuperSchema(compStatCalcCoefficientSchema);
    calc3ParameterSchema.addSuperSchema(compStatCalcCoefficientSchema);
    compStatCompressorSchema.addSuperSchema(gridComponentSchema);
    gasDrivenMotorSchema.addSuperSchema(compStatDriveSchema);
    compStatDriveSchema.addSuperSchema(gridComponentSchema);
    gasTurbineSchema.addSuperSchema(compStatDriveSchema);
    steamTurbineSchema.addSuperSchema(compStatDriveSchema);
    electricMotorSchema.addSuperSchema(compStatDriveSchema);
    compStatSchema.addSuperSchema(gridComponentSchema);
    branchSchema.addSuperSchema(gridComponentSchema);
    pistonCompressorSchema.addSuperSchema(compStatCompressorSchema);
    turboCompressorSchema.addSuperSchema(compStatCompressorSchema);
    valveSchema.addSuperSchema(connectionSchema);
    resistorSchema.addSuperSchema(connectionSchema);
    compressorSchema.addSuperSchema(connectionSchema);
    controlValveSchema.addSuperSchema(valveSchema);
    storageSchema.addSuperSchema(entrySchema);
    connectionSchema.addSuperSchema(gridComponentSchema);
    shortPipeSchema.addSuperSchema(connectionSchema);
    pipeSchema.addSuperSchema(connectionSchema);
    innodeSchema.addSuperSchema(gridComponentSchema);
    exitSchema.addSuperSchema(innodeSchema);
    entrySchema.addSuperSchema(exitSchema);
    directionSettingNotificationSchema.addSuperSchema(notificationSchema);
    clusterNotificationSchema.addSuperSchema(notificationSchema);

   }catch (java.lang.Exception e) {e.printStackTrace();}
  }
  }
