; Tue Sep 15 02:35:55 CEST 2009
; 
;+ (version "3.3.1")
;+ (build "Build 430")


(defclass %3ACLIPS_TOP_LEVEL_SLOT_CLASS "Fake class to save top-level slot information"
	(is-a USER)
	(role abstract)
	(single-slot id
;+		(comment "LSCU 107737 9")
		(type STRING)
		(default "LSCU 107737 9")
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot starts_at
		(type INSTANCE)
;+		(allowed-classes ContainerHolder BayMap)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(multislot has_subdomains
		(type SYMBOL)
;+		(allowed-parents Subdomain)
;+		(inverse-slot lies_in)
		(create-accessor read-write))
	(single-slot stowage_capability
;+		(comment "x-over-y\ncapability of device to move x container above y")
		(type STRING)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot lives_in
;+		(comment "the domain, in which the containerholder is located")
		(type SYMBOL)
;+		(allowed-parents Domain Subdomain)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(single-slot takes
;+		(comment "required time to perform")
		(type FLOAT)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot from
;+		(comment "start of available domainarea")
		(type STRING)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot height
		(type FLOAT)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot ship_length
		(type FLOAT)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot ends_at
		(type INSTANCE)
;+		(allowed-classes ContainerHolder BayMap)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot lies_in
		(type SYMBOL)
;+		(allowed-parents Domain)
;+		(cardinality 1 1)
;+		(inverse-slot has_subdomains)
		(create-accessor read-write))
	(multislot is_filled_with
;+		(comment "BlockAdresses and therefore containers this bay map contains")
		(type INSTANCE)
;+		(allowed-classes BlockAddress)
		(create-accessor read-write))
	(single-slot addresses_within
;+		(comment "denotes the bay map  in which the address lies")
		(type INSTANCE)
;+		(allowed-classes BayMap)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(multislot links
		(type INSTANCE)
;+		(allowed-classes TransportOrderChain)
;+		(inverse-slot is_linked_by)
		(create-accessor read-write))
	(multislot capable_of
;+		(comment "domains, in which containers can be manipulated")
		(type SYMBOL)
;+		(allowed-parents Domain Subdomain)
		(cardinality 1 ?VARIABLE)
		(create-accessor read-write))
	(single-slot provides
		(type INSTANCE)
;+		(allowed-classes BayMap)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(single-slot to_be_stored
;+		(comment "transport order of object which is to be stored")
		(type INSTANCE)
;+		(allowed-classes TransportOrderChain)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(single-slot consists_of
		(type INSTANCE)
;+		(allowed-classes TransportOrderChain)
;+		(cardinality 1 1)
;+		(inverse-slot makes_up)
		(create-accessor read-write))
	(multislot is_linked_by
		(type INSTANCE)
;+		(allowed-classes TransportOrder)
		(cardinality 1 ?VARIABLE)
;+		(inverse-slot links)
		(create-accessor read-write))
	(single-slot width
		(type FLOAT)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(multislot available_cranes
		(type INSTANCE)
;+		(allowed-classes AID)
		(create-accessor read-write))
	(single-slot assigned_quay
		(type INSTANCE)
;+		(allowed-classes Quay)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot weight
		(type FLOAT)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot is_coolable
		(type SYMBOL)
		(allowed-values FALSE TRUE)
		(default FALSE)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot searched_after
;+		(comment "container to be looked for")
		(type INSTANCE)
;+		(allowed-classes Container)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(single-slot store_in
		(type INSTANCE)
;+		(allowed-classes BlockAddress)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(single-slot length
		(type FLOAT)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot occupies
		(type INSTANCE)
;+		(allowed-classes BlockAddress)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot tonnage_capacity
		(type FLOAT)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot required_turnover_capacity
		(type INSTANCE)
;+		(allowed-classes LoadList)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot x_dimension
		(type INTEGER)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(multislot found
		(type INSTANCE)
;+		(allowed-classes Container)
		(cardinality 1 ?VARIABLE)
		(create-accessor read-write))
	(single-slot contains
;+		(comment "the storage area provided by the holder")
		(type INSTANCE)
;+		(allowed-classes BayMap)
;+		(cardinality 1 1)
;+		(inverse-slot belongs_to)
		(create-accessor read-write))
	(single-slot belongs_to
;+		(comment "the holder, to which this baymap belongs")
		(type INSTANCE)
;+		(allowed-classes ContainerHolder)
;+		(cardinality 1 1)
;+		(inverse-slot contains)
		(create-accessor read-write))
	(single-slot carries_dangerous_goods
		(type SYMBOL)
		(allowed-values FALSE TRUE)
		(default FALSE)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot part_of
		(type SYMBOL)
;+		(allowed-parents DomainArea)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(single-slot y_dimension
		(type INTEGER)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot transports
;+		(comment "container to be transported")
		(type INSTANCE)
;+		(allowed-classes Container)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(single-slot z_dimension
		(type INTEGER)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot makes_up
		(type INSTANCE)
;+		(allowed-classes LoadList)
;+		(cardinality 0 1)
;+		(inverse-slot consists_of)
		(create-accessor read-write))
	(single-slot to
;+		(comment "end of available domainarea")
		(type STRING)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot terminates_at
;+		(comment "final destination")
		(type STRING)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot populate_on
;+		(comment "the bay map to be populated")
		(type INSTANCE)
;+		(allowed-classes BayMap)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(single-slot load_offer
		(type INSTANCE)
;+		(allowed-classes TransportOrder)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot load_status
		(type SYMBOL)
		(allowed-values STARTED PENDING FINISHED)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(multislot locates
		(type INSTANCE)
;+		(allowed-classes Container)
		(create-accessor read-write))
	(multislot inverse_of_is_filled_with
		(type INSTANCE)
;+		(allowed-classes BayMap)
		(create-accessor read-write))
	(multislot inverse_of_occupies
		(type INSTANCE)
;+		(allowed-classes Container)
		(create-accessor read-write)))

(defclass EnrollAtHarbor "Register with the HarborMaster and get a berthing place"
	(is-a AgentAction)
	(role concrete)
	(single-slot ship_length
		(type FLOAT)
;+		(cardinality 0 1)
		(create-accessor read-write)))

(defclass AssignHarborQuay "assign quay to berthing ship"
	(is-a AgentAction)
	(role concrete)
	(single-slot assigned_quay
		(type INSTANCE)
;+		(allowed-classes Quay)
;+		(cardinality 0 1)
		(create-accessor read-write)))

(defclass GetCraneList
	(is-a AgentAction)
	(role concrete)
	(single-slot required_turnover_capacity
		(type INSTANCE)
;+		(allowed-classes LoadList)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot assigned_quay
		(type INSTANCE)
;+		(allowed-classes Quay)
;+		(cardinality 0 1)
		(create-accessor read-write)))

(defclass ProvideCraneList
	(is-a AgentAction)
	(role concrete)
	(multislot available_cranes
		(type INSTANCE)
;+		(allowed-classes AID)
		(create-accessor read-write)))

(defclass CallForProposalsOnLoadStage
	(is-a AgentAction)
	(role concrete)
	(single-slot required_turnover_capacity
		(type INSTANCE)
;+		(allowed-classes LoadList)
;+		(cardinality 0 1)
		(create-accessor read-write)))

(defclass ProposeLoadOffer
	(is-a AgentAction)
	(role concrete)
	(single-slot load_offer
		(type INSTANCE)
;+		(allowed-classes TransportOrder)
;+		(cardinality 0 1)
		(create-accessor read-write)))

(defclass AcceptLoadOffer
	(is-a AgentAction)
	(role concrete)
	(single-slot load_offer
		(type INSTANCE)
;+		(allowed-classes TransportOrder)
;+		(cardinality 0 1)
		(create-accessor read-write)))

(defclass RejectLoadOffer
	(is-a AgentAction)
	(role concrete)
	(single-slot load_offer
		(type INSTANCE)
;+		(allowed-classes TransportOrder)
;+		(cardinality 0 1)
		(create-accessor read-write)))

(defclass AnnounceLoadStatus
	(is-a AgentAction)
	(role concrete)
	(single-slot load_offer
		(type INSTANCE)
;+		(allowed-classes TransportOrder)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot load_status
		(type SYMBOL)
		(allowed-values STARTED PENDING FINISHED)
;+		(cardinality 0 1)
		(create-accessor read-write)))

(defclass AskForDestination
	(is-a AgentAction)
	(role concrete)
	(single-slot to_be_stored
;+		(comment "transport order of object which is to be stored")
		(type INSTANCE)
;+		(allowed-classes TransportOrderChain)
;+		(cardinality 1 1)
		(create-accessor read-write)))

(defclass AssignBlockAddress "announces address of block, where designated container should be transported to"
	(is-a AgentAction)
	(role concrete)
	(single-slot store_in
		(type INSTANCE)
;+		(allowed-classes BlockAddress)
;+		(cardinality 1 1)
		(create-accessor read-write)))

(defclass LookForContainer
	(is-a AgentAction)
	(role concrete)
	(single-slot searched_after
;+		(comment "container to be looked for")
		(type INSTANCE)
;+		(allowed-classes Container)
;+		(cardinality 1 1)
		(create-accessor read-write)))

(defclass IndicateContainer
	(is-a AgentAction)
	(role concrete)
	(multislot found
		(type INSTANCE)
;+		(allowed-classes Container)
		(cardinality 1 ?VARIABLE)
		(create-accessor read-write)))

(defclass RequestRandomBayMap "Request a random generated bay map at the RandomGeneratorAgent for development purposes"
	(is-a AgentAction)
	(role concrete)
	(single-slot x_dimension
		(type INTEGER)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot z_dimension
		(type INTEGER)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot y_dimension
		(type INTEGER)
;+		(cardinality 0 1)
		(create-accessor read-write)))

(defclass ProvideBayMap
	(is-a AgentAction)
	(role concrete)
	(single-slot provides
		(type INSTANCE)
;+		(allowed-classes BayMap)
;+		(cardinality 1 1)
		(create-accessor read-write)))

(defclass RequestPopulatedBayMap "Request a randomly populated bay map at the RandomGeneratorAgent for development purposes"
	(is-a AgentAction)
	(role concrete)
	(single-slot populate_on
;+		(comment "the bay map to be populated")
		(type INSTANCE)
;+		(allowed-classes BayMap)
;+		(cardinality 1 1)
		(create-accessor read-write)))

(defclass ProvidePopulatedBayMap
	(is-a AgentAction)
	(role concrete)
	(single-slot provides
		(type INSTANCE)
;+		(allowed-classes BayMap)
;+		(cardinality 1 1)
		(create-accessor read-write)))

(defclass Container
	(is-a Concept)
	(role concrete)
	(single-slot id
;+		(comment "LSCU 107737 9")
		(type STRING)
		(default "LSCU 107737 9")
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot length
		(type FLOAT)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot width
		(type FLOAT)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot height
		(type FLOAT)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot weight
		(type FLOAT)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot carries_dangerous_goods
		(type SYMBOL)
		(allowed-values FALSE TRUE)
		(default FALSE)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot is_coolable
		(type SYMBOL)
		(allowed-values FALSE TRUE)
		(default FALSE)
;+		(cardinality 0 1)
		(create-accessor read-write)))

(defclass TwentyFootContainer
	(is-a Container)
	(role concrete)
	(single-slot length
		(type FLOAT)
;+		(value 6.058)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot width
		(type FLOAT)
;+		(value 2.438)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot height
		(type FLOAT)
;+		(value 2.591)
;+		(cardinality 0 1)
		(create-accessor read-write)))

(defclass ContainerHolder
	(is-a Concept)
	(role concrete)
	(single-slot lives_in
;+		(comment "the domain, in which the containerholder is located")
		(type SYMBOL)
;+		(allowed-parents Domain Subdomain)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(single-slot contains
;+		(comment "the storage area provided by the holder")
		(type INSTANCE)
;+		(allowed-classes BayMap)
;+		(cardinality 1 1)
		(create-accessor read-write)))

(defclass StaticContainerHolder "can't move at all, e.g. yard"
	(is-a ContainerHolder)
	(role concrete))

(defclass Yard
	(is-a StaticContainerHolder)
	(role concrete))

(defclass PassiveContainerHolder "can move containers inside of a domain, e.g. train"
	(is-a ContainerHolder)
	(role concrete))

(defclass Train
	(is-a PassiveContainerHolder)
	(role concrete))

(defclass Ship
	(is-a PassiveContainerHolder)
	(role concrete)
	(single-slot length
		(type FLOAT)
;+		(cardinality 0 1)
		(create-accessor read-write)))

(defclass ActiveContainerHolder "can manipulate containers, can move them between domains, e.g. crane"
	(is-a ContainerHolder)
	(role concrete)
	(multislot capable_of
;+		(comment "domains, in which containers can be manipulated")
		(type SYMBOL)
;+		(allowed-parents Domain Subdomain)
		(cardinality 1 ?VARIABLE)
		(create-accessor read-write))
	(single-slot tonnage_capacity
		(type FLOAT)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot stowage_capability
;+		(comment "x-over-y\ncapability of device to move x container above y")
		(type STRING)
		(default "1-over-5")
;+		(cardinality 0 1)
		(create-accessor read-write)))

(defclass ReachStacker
	(is-a ActiveContainerHolder)
	(role concrete)
	(single-slot lives_in
;+		(comment "the domain, in which the containerholder is located")
		(type SYMBOL)
;+		(allowed-parents Domain Subdomain)
;+		(value Street)
;+		(cardinality 1 1)
		(create-accessor read-write)))

(defclass Crane "Portal Bridge Crane, Stevedore"
	(is-a ActiveContainerHolder)
	(role concrete)
	(single-slot lives_in
;+		(comment "the domain, in which the containerholder is located")
		(type SYMBOL)
;+		(allowed-parents Domain Subdomain)
;+		(value Rail)
;+		(cardinality 1 1)
		(create-accessor read-write)))

(defclass RMG "rail mounted gentry crane"
	(is-a ActiveContainerHolder)
	(role concrete)
	(multislot capable_of
;+		(comment "domains, in which containers can be manipulated")
		(type SYMBOL)
;+		(allowed-parents Domain Subdomain)
;+		(value Street Rail)
		(cardinality 1 ?VARIABLE)
		(create-accessor read-write))
	(single-slot tonnage_capacity
		(type FLOAT)
;+		(value 10.0)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot lives_in
;+		(comment "the domain, in which the containerholder is located")
		(type SYMBOL)
;+		(allowed-parents Domain Subdomain)
;+		(value Rail)
;+		(cardinality 1 1)
		(create-accessor read-write)))

(defclass Domain "the domain, in which the containerholder is located"
	(is-a Concept)
	(role abstract)
	(multislot has_subdomains
		(type SYMBOL)
;+		(allowed-parents Subdomain)
		(create-accessor read-write)))

(defclass Sea
	(is-a Domain)
	(role concrete))

(defclass Land
	(is-a Domain)
	(role concrete))

(defclass BayMap
	(is-a Concept)
	(role concrete)
	(single-slot x_dimension
		(type INTEGER)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot z_dimension
		(type INTEGER)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(multislot is_filled_with
;+		(comment "BlockAdresses and therefore containers this bay map contains")
		(type INSTANCE)
;+		(allowed-classes BlockAddress)
		(create-accessor read-write))
	(single-slot y_dimension
		(type INTEGER)
;+		(cardinality 0 1)
		(create-accessor read-write)))

(defclass Subdomain
	(is-a Concept)
	(role abstract)
	(single-slot lies_in
		(type SYMBOL)
;+		(allowed-parents Domain)
;+		(cardinality 1 1)
		(create-accessor read-write)))

(defclass Street
	(is-a Subdomain)
	(role concrete)
	(single-slot lies_in
		(type SYMBOL)
;+		(allowed-parents Domain)
;+		(value Land)
;+		(cardinality 1 1)
		(create-accessor read-write)))

(defclass Rail
	(is-a Subdomain)
	(role concrete)
	(single-slot lies_in
		(type SYMBOL)
;+		(allowed-parents Domain)
;+		(value Land)
;+		(cardinality 1 1)
		(create-accessor read-write)))

(defclass Quay
	(is-a Subdomain)
	(role concrete)
	(single-slot lies_in
		(type SYMBOL)
;+		(allowed-parents Domain)
;+		(value Land)
;+		(cardinality 1 1)
		(create-accessor read-write)))

(defclass DomainArea
	(is-a Concept)
	(role concrete)
	(single-slot from
;+		(comment "start of available domainarea")
		(type STRING)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot to
;+		(comment "end of available domainarea")
		(type STRING)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot part_of
		(type SYMBOL)
;+		(allowed-parents DomainArea)
;+		(cardinality 1 1)
		(create-accessor read-write)))

(defclass TransportOrder "step-like transport orders"
	(is-a Concept)
	(role concrete)
	(multislot links
		(type INSTANCE)
;+		(allowed-classes TransportOrderChain)
		(create-accessor read-write))
	(single-slot starts_at
		(type INSTANCE)
;+		(allowed-classes ContainerHolder BayMap)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(single-slot takes
;+		(comment "required time to perform")
		(type FLOAT)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot ends_at
		(type INSTANCE)
;+		(allowed-classes ContainerHolder BayMap)
;+		(cardinality 0 1)
		(create-accessor read-write)))

(defclass TransportOrderChain "high-level transport order with destination"
	(is-a Concept)
	(role concrete)
	(multislot is_linked_by
		(type INSTANCE)
;+		(allowed-classes TransportOrder)
		(cardinality 1 ?VARIABLE)
		(create-accessor read-write))
	(single-slot transports
;+		(comment "container to be transported")
		(type INSTANCE)
;+		(allowed-classes Container)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(single-slot makes_up
		(type INSTANCE)
;+		(allowed-classes LoadList)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot terminates_at
;+		(comment "final destination")
		(type STRING)
;+		(cardinality 0 1)
		(create-accessor read-write)))

(defclass LoadList "collection of transport orders for one long-time loading or unloading process"
	(is-a Concept)
	(role concrete)
	(single-slot consists_of
		(type INSTANCE)
;+		(allowed-classes TransportOrderChain)
;+		(cardinality 1 1)
		(create-accessor read-write)))

(defclass BlockAddress "Address of a free slot or of a container occupying a slot in a bay map"
	(is-a Concept)
	(role concrete)
	(multislot locates
		(type INSTANCE)
;+		(allowed-classes Container)
		(create-accessor read-write))
	(single-slot x_dimension
		(type INTEGER)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot z_dimension
		(type INTEGER)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot y_dimension
		(type INTEGER)
;+		(cardinality 0 1)
		(create-accessor read-write)))