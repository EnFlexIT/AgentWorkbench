// file: EnvironmentOntology.java generated by ontology bean generator.  DO NOT EDIT, UNLESS YOU ARE REALLY SURE WHAT YOU ARE DOING!
package agentgui.envModel.p2Dsvg.ontology;

import jade.content.onto.*;
import jade.content.schema.*;
import jade.util.leap.HashMap;
import jade.content.lang.Codec;
import jade.core.CaseInsensitiveString;

/** file: EnvironmentOntology.java
 * @author ontology bean generator
 * @version 2010/11/17, 20:10:06
 */
public class EnvironmentOntology extends jade.content.onto.Ontology  {
  //NAME
  public static final String ONTOLOGY_NAME = "Environment";
  // The singleton instance of this ontology
  private static ReflectiveIntrospector introspect = new ReflectiveIntrospector();
  private static Ontology theInstance = new EnvironmentOntology();
  public static Ontology getInstance() {
     return theInstance;
  }


   // VOCABULARY
    public static final String MOVEMENT_YPOSCHANGE="yPosChange";
    public static final String MOVEMENT_XPOSCHANGE="xPosChange";
    public static final String MOVEMENT="Movement";
    public static final String PHYSICAL2DENVIRONMENT_ROOTPLAYGROUND="rootPlayground";
    public static final String PHYSICAL2DENVIRONMENT_PROJECTNAME="projectName";
    public static final String PHYSICAL2DENVIRONMENT_SCALE="scale";
    public static final String PHYSICAL2DENVIRONMENT="Physical2DEnvironment";
    public static final String PASSIVEOBJECT_CONTROLLINGOBJECTID="controllingObjectID";
    public static final String PASSIVEOBJECT="PassiveObject";
    public static final String PHYSICAL2DOBJECT_POSITION="position";
    public static final String PHYSICAL2DOBJECT_ID="id";
    public static final String PHYSICAL2DOBJECT_PARENTPLAYGROUNDID="parentPlaygroundID";
    public static final String PHYSICAL2DOBJECT_SIZE="size";
    public static final String PHYSICAL2DOBJECT="Physical2DObject";
    public static final String SIZE_WIDTH="width";
    public static final String SIZE_HEIGHT="height";
    public static final String SIZE="Size";
    public static final String SCALE_REALWORLDUNTINAME="realWorldUntiName";
    public static final String SCALE_PIXELVALUE="pixelValue";
    public static final String SCALE_REALWORLDUNITVALUE="realWorldUnitValue";
    public static final String SCALE="Scale";
    public static final String PLAYGROUNDOBJECT_CHILDOBJECTS="childObjects";
    public static final String PLAYGROUNDOBJECT="PlaygroundObject";
    public static final String ACTIVEOBJECT_MOVEMENT="movement";
    public static final String ACTIVEOBJECT_AGENTCLASSNAME="agentClassName";
    public static final String ACTIVEOBJECT_PAYLOAD="payload";
    public static final String ACTIVEOBJECT_MAXSPEED="maxSpeed";
    public static final String ACTIVEOBJECT="ActiveObject";
    public static final String STATICOBJECT="StaticObject";
    public static final String POSITION_YPOS="yPos";
    public static final String POSITION_XPOS="xPos";
    public static final String POSITION="Position";

  /**
   * Constructor
  */
  private EnvironmentOntology(){ 
    super(ONTOLOGY_NAME, BasicOntology.getInstance());
    try { 

    // adding Concept(s)
    ConceptSchema positionSchema = new ConceptSchema(POSITION);
    add(positionSchema, agentgui.envModel.p2Dsvg.ontology.Position.class);
    ConceptSchema staticObjectSchema = new ConceptSchema(STATICOBJECT);
    add(staticObjectSchema, agentgui.envModel.p2Dsvg.ontology.StaticObject.class);
    ConceptSchema activeObjectSchema = new ConceptSchema(ACTIVEOBJECT);
    add(activeObjectSchema, agentgui.envModel.p2Dsvg.ontology.ActiveObject.class);
    ConceptSchema playgroundObjectSchema = new ConceptSchema(PLAYGROUNDOBJECT);
    add(playgroundObjectSchema, agentgui.envModel.p2Dsvg.ontology.PlaygroundObject.class);
    ConceptSchema scaleSchema = new ConceptSchema(SCALE);
    add(scaleSchema, agentgui.envModel.p2Dsvg.ontology.Scale.class);
    ConceptSchema sizeSchema = new ConceptSchema(SIZE);
    add(sizeSchema, agentgui.envModel.p2Dsvg.ontology.Size.class);
    ConceptSchema physical2DObjectSchema = new ConceptSchema(PHYSICAL2DOBJECT);
    add(physical2DObjectSchema, agentgui.envModel.p2Dsvg.ontology.Physical2DObject.class);
    ConceptSchema passiveObjectSchema = new ConceptSchema(PASSIVEOBJECT);
    add(passiveObjectSchema, agentgui.envModel.p2Dsvg.ontology.PassiveObject.class);
    ConceptSchema physical2DEnvironmentSchema = new ConceptSchema(PHYSICAL2DENVIRONMENT);
    add(physical2DEnvironmentSchema, agentgui.envModel.p2Dsvg.ontology.Physical2DEnvironment.class);
    ConceptSchema movementSchema = new ConceptSchema(MOVEMENT);
    add(movementSchema, agentgui.envModel.p2Dsvg.ontology.Movement.class);

    // adding AgentAction(s)

    // adding AID(s)

    // adding Predicate(s)


    // adding fields
    positionSchema.add(POSITION_XPOS, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.MANDATORY);
    positionSchema.add(POSITION_YPOS, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.MANDATORY);
    activeObjectSchema.add(ACTIVEOBJECT_MAXSPEED, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.MANDATORY);
    activeObjectSchema.add(ACTIVEOBJECT_PAYLOAD, passiveObjectSchema, 0, ObjectSchema.UNLIMITED);
    activeObjectSchema.add(ACTIVEOBJECT_AGENTCLASSNAME, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    activeObjectSchema.add(ACTIVEOBJECT_MOVEMENT, movementSchema, ObjectSchema.MANDATORY);
    playgroundObjectSchema.add(PLAYGROUNDOBJECT_CHILDOBJECTS, physical2DObjectSchema, 0, ObjectSchema.UNLIMITED);
    scaleSchema.add(SCALE_REALWORLDUNITVALUE, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.MANDATORY);
    scaleSchema.add(SCALE_PIXELVALUE, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.MANDATORY);
    scaleSchema.add(SCALE_REALWORLDUNTINAME, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    sizeSchema.add(SIZE_HEIGHT, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.MANDATORY);
    sizeSchema.add(SIZE_WIDTH, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.MANDATORY);
    physical2DObjectSchema.add(PHYSICAL2DOBJECT_SIZE, sizeSchema, ObjectSchema.MANDATORY);
    physical2DObjectSchema.add(PHYSICAL2DOBJECT_PARENTPLAYGROUNDID, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    physical2DObjectSchema.add(PHYSICAL2DOBJECT_ID, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    physical2DObjectSchema.add(PHYSICAL2DOBJECT_POSITION, positionSchema, ObjectSchema.MANDATORY);
    passiveObjectSchema.add(PASSIVEOBJECT_CONTROLLINGOBJECTID, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    physical2DEnvironmentSchema.add(PHYSICAL2DENVIRONMENT_SCALE, scaleSchema, ObjectSchema.MANDATORY);
    physical2DEnvironmentSchema.add(PHYSICAL2DENVIRONMENT_PROJECTNAME, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.MANDATORY);
    physical2DEnvironmentSchema.add(PHYSICAL2DENVIRONMENT_ROOTPLAYGROUND, playgroundObjectSchema, ObjectSchema.MANDATORY);
    movementSchema.add(MOVEMENT_XPOSCHANGE, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.MANDATORY);
    movementSchema.add(MOVEMENT_YPOSCHANGE, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.MANDATORY);

    // adding name mappings

    // adding inheritance
    staticObjectSchema.addSuperSchema(physical2DObjectSchema);
    activeObjectSchema.addSuperSchema(physical2DObjectSchema);
    playgroundObjectSchema.addSuperSchema(physical2DObjectSchema);
    passiveObjectSchema.addSuperSchema(physical2DObjectSchema);

   }catch (java.lang.Exception e) {e.printStackTrace();}
  }
  }
