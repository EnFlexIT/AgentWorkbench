//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.3.2 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2023.12.05 at 09:28:32 AM CET 
//


package de.enflexit.common.linearization;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;


/**
 * 
 * 			Describes all linear formulas that belong to a mathematical, stepwise linearization.
 * 			
 * 
 * <p>Java class for Linearization complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="Linearization"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="LinearFormulaList" type="{http://www.dawis.wiwi.uni-due.de/EnergyOptionModel}LinearFormula" maxOccurs="unbounded"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Linearization", propOrder = {
    "linearFormulaList"
})
public class Linearization
    implements Serializable
{

    private final static long serialVersionUID = 201404191434L;
    @XmlElement(name = "LinearFormulaList", required = true)
    protected List<LinearFormula> linearFormulaList;

    /**
     * Gets the value of the linearFormulaList property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the linearFormulaList property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getLinearFormulaList().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link LinearFormula }
     * 
     * 
     */
    public List<LinearFormula> getLinearFormulaList() {
        if (linearFormulaList == null) {
            linearFormulaList = new ArrayList<LinearFormula>();
        }
        return this.linearFormulaList;
    }

    
    // ------------------------------------------------------------------------
    // --- From here customized code ------------------------------------------ 
    // ------------------------------------------------------------------------    
    /**
     * Creates a LinearCoefficient.
     *
     * @param variableID the variable ID
     * @param value the value
     * @param validFrom the valid from
     * @param validTo the valid to
     * @return the linear coefficient
     */
    public LinearCoefficient createLinearCoefficient(String variableID, Double value, Double validFrom, Double validTo) {
    	return LinearCoefficient.createLinearCoefficient(variableID, value, validFrom, validTo);
    }
    /**
     * Adds the specified LinearCoefficient to all linear functions within the current Linearization.
     *
     * @param linearCoefficient the linear coefficient
     * @return true, if the LinearCoefficient could be added successfully
     */
    public boolean addLinearCoefficient(LinearCoefficient linearCoefficient) {
    	
    	if (this.isUsedVariableID(linearCoefficient.getVariableID())==true) return false;
    	
    	// --- If no formula is yet created, create one -------------
    	if (this.getLinearFormulaList().size()==0) {
    		this.getLinearFormulaList().add(this.createLinearFormula());
    	}
    	// --- Add coefficient to each formula ----------------------
    	for (LinearFormula linearFormula : this.getLinearFormulaList()) {
    		linearFormula.getCoefficientList().add(linearCoefficient.getCopy());
    	}
    	return true;
    }
    
    
    /**
     * Creates a linear formula.
     * @return the linear formula
     */
    public LinearFormula createLinearFormula() {
    	LinearFormula formula = new LinearFormula();
    	formula.setAxisIntercept(0);
    	return formula;
    }
    
    
    /**
     * Check if the specified variableID is used within the Linearization.
     *
     * @param variableID the variableID to check
     * @return true, if successful
     */
    public boolean isUsedVariableID(String variableID) {
    	return this.getVariableIDs().contains(variableID);
    }
    /**
     * Returns a list of all variableID's used in the linearization.
     * @return the variableIDs
     */
    public List<String> getVariableIDs() {
    	
    	List<String> variableIDList = new ArrayList<>();
    	for (LinearFormula linearFormula : this.getLinearFormulaList()) {
    		for (LinearCoefficient linearCoefficient : linearFormula.getCoefficientList()) {
    			if (variableIDList.contains(linearCoefficient.getVariableID())==false) {
    				variableIDList.add(linearCoefficient.getVariableID());
    			}
    		}
    	}
    	return variableIDList;
    }
    
}
