//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.3.2 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2023.12.05 at 09:28:32 AM CET 
//


package de.enflexit.common.linearization;

import java.io.Serializable;
import java.util.Comparator;

import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlElement;
import jakarta.xml.bind.annotation.XmlType;


/**
 * 
 * 			Describes a single coefficient for a LinearFormula.
 * 			
 * 
 * <p>Java class for LinearCoefficient complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="LinearCoefficient"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="VariableID" type="{http://www.w3.org/2001/XMLSchema}string"/&gt;
 *         &lt;element name="Value" type="{http://www.w3.org/2001/XMLSchema}double"/&gt;
 *         &lt;element name="ValidFrom" type="{http://www.w3.org/2001/XMLSchema}double"/&gt;
 *         &lt;element name="ValidTo" type="{http://www.w3.org/2001/XMLSchema}double"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "LinearCoefficient", propOrder = {
    "variableID",
    "value",
    "validFrom",
    "validTo"
})
public class LinearCoefficient
    implements Serializable
{

    private final static long serialVersionUID = 201404191434L;
    
    @XmlElement(name = "VariableID", required = true)
    protected String variableID;
    @XmlElement(name = "Value")
    protected double value;
    @XmlElement(name = "ValidFrom")
    protected double validFrom;
    @XmlElement(name = "ValidTo")
    protected double validTo;

    /**
     * Gets the value of the variableID property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getVariableID() {
        return variableID;
    }

    /**
     * Sets the value of the variableID property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setVariableID(String value) {
        this.variableID = value;
    }

    /**
     * Gets the value of the value property.
     * 
     */
    public double getValue() {
        return value;
    }

    /**
     * Sets the value of the value property.
     * 
     */
    public void setValue(double value) {
        this.value = value;
    }

    /**
     * Gets the value of the validFrom property.
     * 
     */
    public double getValidFrom() {
        return validFrom;
    }

    /**
     * Sets the value of the validFrom property.
     * 
     */
    public void setValidFrom(double value) {
        this.validFrom = value;
    }

    /**
     * Gets the value of the validTo property.
     * 
     */
    public double getValidTo() {
        return validTo;
    }

    /**
     * Sets the value of the validTo property.
     * 
     */
    public void setValidTo(double value) {
        this.validTo = value;
    }

    
    // ------------------------------------------------------------------------
    // --- From here customized code ------------------------------------------ 
    // ------------------------------------------------------------------------        
    /**
	 * Returns a copy of the current instance.
	 * @return the copy
	 */
	public LinearCoefficient getCopy() {
		return createLinearCoefficient(this.getVariableID(), this.getValue(), this.getValidFrom(), this.getValidTo());
	}
	
	/**
	 * Checks if the current coefficient provides the required variable range and returns a match weight.
	 *
	 * @param value the value to check
	 * @param isEnabledSmallerEqualComparison the indicator to enable an smaller equal comparison
	 * @return true, if the coefficient is applicable for the specified variable value
	 */
	public int getMatchWeight(Double value, boolean isEnabledSmallerEqualComparison) {
		
		if (value==null) return LinearFormulaMatch.NO_MATCH;
		
		if (this.getValidFrom()==this.getValidTo() && value==this.getValidFrom()) {
			// --- Perfect match ----------------
			return LinearFormulaMatch.PERFECT_MATCH;
		} else {
			// --- Match ------------------------
			if (isEnabledSmallerEqualComparison==true) {
				if (value>=this.getValidFrom() & value <= this.getValidTo()) {
					return LinearFormulaMatch.MATCH;
				}
			} else {
				if (value>=this.getValidFrom() & value < this.getValidTo()) {
					return LinearFormulaMatch.MATCH;
				}
			}
		}
		return LinearFormulaMatch.NO_MATCH;
	}
	
	/**
	 * Checks if the current coefficient provides the required variable range.
	 *
	 * @param value the value to check
	 * @param isEnabledSmallerEqualComparison the indicator to enable an smaller equal comparison
	 * @return true, if the coefficient is applicable for the specified variable value
	 */
	public boolean providesRequiredVariableRange(Double value, boolean isEnabledSmallerEqualComparison) {
		
		if (value==null) return false;
		
		if (this.getValidFrom()==this.getValidTo() && value==this.getValidFrom()) {
			// --- Perfect match ----------------
			return true;
		} else {
			// --- Match ------------------------
			if (isEnabledSmallerEqualComparison==true) {
				if (value>=this.getValidFrom() & value <= this.getValidTo()) {
					return true;
				}
			} else {
				if (value>=this.getValidFrom() & value < this.getValidTo()) {
					return true;
				}
			}
		}
		
		
		return false;
	}
	/**
	 * Returns the sub result from the multiplication of the local value and the specified value factor.
	 *
	 * @param valueFactor the value factor to be used for multiplication
	 * @return the calculated result value
	 */
	public Double getTermResult(Double valueFactor) {
		if (valueFactor==null) return null;
		return this.getValue() * valueFactor;
	}
	
	
    /**
     * Creates a LinearCoefficient.
     *
     * @param variableID the variable ID
     * @param value the value
     * @param validFrom the valid from
     * @param validTo the valid to
     * @return the linear coefficient
     */
    public static LinearCoefficient createLinearCoefficient(String variableID, Double value, Double validFrom, Double validTo) {
    	
    	if (variableID==null || variableID.isBlank()==true) {
    		throw new NullPointerException("The variableID for a LinearCoefficient is not allowed to be null or empty!");
    	}
    	
    	LinearCoefficient lc = new LinearCoefficient();
    	lc.setVariableID(variableID);
    	lc.setValue(value!=null ? value : 1.0);
    	lc.setValidFrom(validFrom!=null ? validFrom : Linearization.DEFAULT_DOUBLE_VALUE_MIN);
    	lc.setValidTo(validTo!=null ? validTo : Linearization.DEFAULT_DOUBLE_VALUE_MAX);
    	return lc;
    }

    // --------------------------------------------------------------
    // --- From here comparator factory methods ---------------------
    // --------------------------------------------------------------    
    /**
     * Gets the comparator for the 'valid from' value.
     * @return the comparator valid from
     */
	public static Comparator<LinearCoefficient> getComparatorValidFrom() {
		return new Comparator<LinearCoefficient>() {
			@Override
			public int compare(LinearCoefficient lc1, LinearCoefficient lc2) {
				Double validFrom1 = lc1.getValidFrom();
				Double validFrom2 = lc2.getValidFrom();
				return validFrom1.compareTo(validFrom2);
			}
		};
	}
	/**
     * Gets the comparator for the 'valid to' value.
     * @return the comparator valid to
     */
	public static Comparator<LinearCoefficient> getComparatorValidTo() {
		return new Comparator<LinearCoefficient>() {
			@Override
			public int compare(LinearCoefficient lc1, LinearCoefficient lc2) {
				Double validTo1 = lc1.getValidTo();
				Double validTo2 = lc2.getValidTo();
				return validTo1.compareTo(validTo2);
			}
		};
	}
	/**
     * Gets the comparator for the 'variableID' value.
     * @return the comparator for variableID's
     */
	public static Comparator<LinearCoefficient> getComparatorVariableID() {
		return new Comparator<LinearCoefficient>() {
			@Override
			public int compare(LinearCoefficient lc1, LinearCoefficient lc2) {
				String varID1 = lc1.getVariableID();
				String varID2 = lc2.getVariableID();
				return varID1.compareTo(varID2);
			}
		};
	}

}
