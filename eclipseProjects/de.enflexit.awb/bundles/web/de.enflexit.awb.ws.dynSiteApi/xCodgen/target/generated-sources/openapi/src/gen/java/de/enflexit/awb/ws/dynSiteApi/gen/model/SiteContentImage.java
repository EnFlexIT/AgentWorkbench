/*
 * EnFlex.IT - Dynamic Content Api
 * This is the Definition of the Api to dynamically fetch content for any enflex.it application
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: admin@enflex.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.enflexit.awb.ws.dynSiteApi.gen.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import de.enflexit.awb.ws.dynSiteApi.gen.model.SiteContentMedia;
import io.swagger.v3.oas.annotations.media.Schema;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;

/**
 * SiteContentImage
 */
@JsonPropertyOrder({
  SiteContentImage.JSON_PROPERTY_DATA_IN_B64,
  SiteContentImage.JSON_PROPERTY_WIDTH,
  SiteContentImage.JSON_PROPERTY_HEIGHT
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaJerseyServerCodegen", date = "2025-04-29T10:05:32.007037200+02:00[Europe/Berlin]", comments = "Generator version: 7.6.0")
public class SiteContentImage extends SiteContentMedia  {
  public static final String JSON_PROPERTY_DATA_IN_B64 = "dataInB64";
  @JsonProperty(JSON_PROPERTY_DATA_IN_B64)
  private String dataInB64;

  public static final String JSON_PROPERTY_WIDTH = "width";
  @JsonProperty(JSON_PROPERTY_WIDTH)
  private Integer width;

  public static final String JSON_PROPERTY_HEIGHT = "height";
  @JsonProperty(JSON_PROPERTY_HEIGHT)
  private Integer height;

  public SiteContentImage dataInB64(String dataInB64) {
    this.dataInB64 = dataInB64;
    return this;
  }

  /**
   * Get dataInB64
   * @return dataInB64
   **/
  @JsonProperty(value = "dataInB64")
  @Schema(required = true, description = "")
  @NotNull 
  public String getDataInB64() {
    return dataInB64;
  }

  public void setDataInB64(String dataInB64) {
    this.dataInB64 = dataInB64;
  }

  public SiteContentImage width(Integer width) {
    this.width = width;
    return this;
  }

  /**
   * Get width
   * @return width
   **/
  @JsonProperty(value = "width")
  @Schema(required = true, description = "")
  @NotNull 
  public Integer getWidth() {
    return width;
  }

  public void setWidth(Integer width) {
    this.width = width;
  }

  public SiteContentImage height(Integer height) {
    this.height = height;
    return this;
  }

  /**
   * Get height
   * @return height
   **/
  @JsonProperty(value = "height")
  @Schema(required = true, description = "")
  @NotNull 
  public Integer getHeight() {
    return height;
  }

  public void setHeight(Integer height) {
    this.height = height;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SiteContentImage siteContentImage = (SiteContentImage) o;
    return super.equals(o) && Objects.equals(this.dataInB64, siteContentImage.dataInB64) &&
        Objects.equals(this.width, siteContentImage.width) &&
        Objects.equals(this.height, siteContentImage.height);
  }

  @Override
  public int hashCode() {
    return Objects.hash(super.hashCode(), dataInB64, super.hashCode(), width, super.hashCode(), height);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SiteContentImage {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    dataInB64: ").append(toIndentedString(dataInB64)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

