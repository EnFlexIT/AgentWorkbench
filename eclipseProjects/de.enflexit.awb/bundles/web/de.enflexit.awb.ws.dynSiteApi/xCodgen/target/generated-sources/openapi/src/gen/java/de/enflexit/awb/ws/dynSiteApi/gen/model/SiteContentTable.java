/*
 * EnFlex.IT - Dynamic Content Api
 * This is the Definition of the Api to dynamically fetch content for any enflex.it application
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: admin@enflex.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.enflexit.awb.ws.dynSiteApi.gen.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import de.enflexit.awb.ws.dynSiteApi.gen.model.AbstractSiteContent;
import de.enflexit.awb.ws.dynSiteApi.gen.model.ValueType;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;

/**
 * SiteContentTable
 */
@JsonPropertyOrder({
  SiteContentTable.JSON_PROPERTY_HEADER,
  SiteContentTable.JSON_PROPERTY_DATA_TYPE,
  SiteContentTable.JSON_PROPERTY_DATA
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaJerseyServerCodegen", date = "2025-07-09T11:20:39.473761300+02:00[Europe/Berlin]", comments = "Generator version: 7.6.0")
public class SiteContentTable extends AbstractSiteContent  {
  public static final String JSON_PROPERTY_HEADER = "header";
  @JsonProperty(JSON_PROPERTY_HEADER)
  private List<String> header = new ArrayList<>();

  public static final String JSON_PROPERTY_DATA_TYPE = "dataType";
  @JsonProperty(JSON_PROPERTY_DATA_TYPE)
  private List<ValueType> dataType = new ArrayList<>();

  public static final String JSON_PROPERTY_DATA = "data";
  @JsonProperty(JSON_PROPERTY_DATA)
  private List<List<String>> data = new ArrayList<>();

  public SiteContentTable header(List<String> header) {
    this.header = header;
    return this;
  }

  public SiteContentTable addHeaderItem(String headerItem) {
    if (this.header == null) {
      this.header = new ArrayList<>();
    }
    this.header.add(headerItem);
    return this;
  }

  /**
   * Get header
   * @return header
   **/
  @JsonProperty(value = "header")
  @Schema(required = true, description = "")
  @NotNull 
  public List<String> getHeader() {
    return header;
  }

  public void setHeader(List<String> header) {
    this.header = header;
  }

  public SiteContentTable dataType(List<ValueType> dataType) {
    this.dataType = dataType;
    return this;
  }

  public SiteContentTable addDataTypeItem(ValueType dataTypeItem) {
    if (this.dataType == null) {
      this.dataType = new ArrayList<>();
    }
    this.dataType.add(dataTypeItem);
    return this;
  }

  /**
   * Get dataType
   * @return dataType
   **/
  @JsonProperty(value = "dataType")
  @Schema(required = true, description = "")
  @NotNull 
  public List<ValueType> getDataType() {
    return dataType;
  }

  public void setDataType(List<ValueType> dataType) {
    this.dataType = dataType;
  }

  public SiteContentTable data(List<List<String>> data) {
    this.data = data;
    return this;
  }

  public SiteContentTable addDataItem(List<String> dataItem) {
    if (this.data == null) {
      this.data = new ArrayList<>();
    }
    this.data.add(dataItem);
    return this;
  }

  /**
   * Get data
   * @return data
   **/
  @JsonProperty(value = "data")
  @Schema(required = true, description = "")
  @NotNull 
  public List<List<String>> getData() {
    return data;
  }

  public void setData(List<List<String>> data) {
    this.data = data;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SiteContentTable siteContentTable = (SiteContentTable) o;
    return super.equals(o) && Objects.equals(this.header, siteContentTable.header) &&
        Objects.equals(this.dataType, siteContentTable.dataType) &&
        Objects.equals(this.data, siteContentTable.data);
  }

  @Override
  public int hashCode() {
    return Objects.hash(super.hashCode(), header, super.hashCode(), dataType, super.hashCode(), data);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SiteContentTable {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    header: ").append(toIndentedString(header)).append("\n");
    sb.append("    dataType: ").append(toIndentedString(dataType)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

