/*
 * Agent.Workbench REST - API
 * This is the REST-API for Agent.Workbench in an embbedded system mode.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: admin@enflex.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.enflexit.awb.ws.restapi.gen.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import io.swagger.v3.oas.annotations.media.Schema;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;

/**
 * Object that holds Version Information.
 */
@Schema(description = "Object that holds Version Information.")
@JsonPropertyOrder({
  Version.JSON_PROPERTY_MAJOR,
  Version.JSON_PROPERTY_MINOR,
  Version.JSON_PROPERTY_MICRO,
  Version.JSON_PROPERTY_QUALIFIER
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaJerseyServerCodegen", date = "2025-07-22T11:28:21.945168200+02:00[Europe/Berlin]", comments = "Generator version: 7.6.0")
public class Version   {
  public static final String JSON_PROPERTY_MAJOR = "major";
  @JsonProperty(JSON_PROPERTY_MAJOR)
  private Integer major;

  public static final String JSON_PROPERTY_MINOR = "minor";
  @JsonProperty(JSON_PROPERTY_MINOR)
  private Integer minor;

  public static final String JSON_PROPERTY_MICRO = "micro";
  @JsonProperty(JSON_PROPERTY_MICRO)
  private Integer micro;

  public static final String JSON_PROPERTY_QUALIFIER = "qualifier";
  @JsonProperty(JSON_PROPERTY_QUALIFIER)
  private String qualifier;

  public Version major(Integer major) {
    this.major = major;
    return this;
  }

  /**
   * the major version number
   * @return major
   **/
  @JsonProperty(value = "major")
  @Schema(required = true, description = "the major version number")
  @NotNull 
  public Integer getMajor() {
    return major;
  }

  public void setMajor(Integer major) {
    this.major = major;
  }

  public Version minor(Integer minor) {
    this.minor = minor;
    return this;
  }

  /**
   * the minor version number
   * @return minor
   **/
  @JsonProperty(value = "minor")
  @Schema(required = true, description = "the minor version number")
  @NotNull 
  public Integer getMinor() {
    return minor;
  }

  public void setMinor(Integer minor) {
    this.minor = minor;
  }

  public Version micro(Integer micro) {
    this.micro = micro;
    return this;
  }

  /**
   * the micro version number
   * @return micro
   **/
  @JsonProperty(value = "micro")
  @Schema(required = true, description = "the micro version number")
  @NotNull 
  public Integer getMicro() {
    return micro;
  }

  public void setMicro(Integer micro) {
    this.micro = micro;
  }

  public Version qualifier(String qualifier) {
    this.qualifier = qualifier;
    return this;
  }

  /**
   * the version qualifier
   * @return qualifier
   **/
  @JsonProperty(value = "qualifier")
  @Schema(required = true, description = "the version qualifier")
  @NotNull 
  public String getQualifier() {
    return qualifier;
  }

  public void setQualifier(String qualifier) {
    this.qualifier = qualifier;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Version version = (Version) o;
    return Objects.equals(this.major, version.major) &&
        Objects.equals(this.minor, version.minor) &&
        Objects.equals(this.micro, version.micro) &&
        Objects.equals(this.qualifier, version.qualifier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(major, minor, micro, qualifier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Version {\n");
    
    sb.append("    major: ").append(toIndentedString(major)).append("\n");
    sb.append("    minor: ").append(toIndentedString(minor)).append("\n");
    sb.append("    micro: ").append(toIndentedString(micro)).append("\n");
    sb.append("    qualifier: ").append(toIndentedString(qualifier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

