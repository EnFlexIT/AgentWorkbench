/*
 * Enflex.IT - Dynamic Content Api
 * This is the Definition of the Api to dynamically fetch content for any enflex.it application
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: admin@enflex.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.enflexit.awb.ws.dynSiteApi.gen.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import io.swagger.v3.oas.annotations.media.Schema;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;

/**
 * SiteContentTimeSeriesChart
 */
@JsonPropertyOrder({
  SiteContentTimeSeriesChart.JSON_PROPERTY_UNIQUE_CONTENT_I_D,
  SiteContentTimeSeriesChart.JSON_PROPERTY_EDITABLE,
  SiteContentTimeSeriesChart.JSON_PROPERTY_UPDATE_PERIOD_IN_SECONDS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaJerseyServerCodegen", date = "2025-03-31T09:56:23.457253900+02:00[Europe/Berlin]", comments = "Generator version: 7.6.0")
public class SiteContentTimeSeriesChart   {
  public static final String JSON_PROPERTY_UNIQUE_CONTENT_I_D = "uniqueContentID";
  @JsonProperty(JSON_PROPERTY_UNIQUE_CONTENT_I_D)
  private Integer uniqueContentID;

  public static final String JSON_PROPERTY_EDITABLE = "editable";
  @JsonProperty(JSON_PROPERTY_EDITABLE)
  private Boolean editable;

  public static final String JSON_PROPERTY_UPDATE_PERIOD_IN_SECONDS = "updatePeriodInSeconds";
  @JsonProperty(JSON_PROPERTY_UPDATE_PERIOD_IN_SECONDS)
  private Integer updatePeriodInSeconds;

  public SiteContentTimeSeriesChart uniqueContentID(Integer uniqueContentID) {
    this.uniqueContentID = uniqueContentID;
    return this;
  }

  /**
   * Get uniqueContentID
   * @return uniqueContentID
   **/
  @JsonProperty(value = "uniqueContentID")
  @Schema(required = true, description = "")
  @NotNull 
  public Integer getUniqueContentID() {
    return uniqueContentID;
  }

  public void setUniqueContentID(Integer uniqueContentID) {
    this.uniqueContentID = uniqueContentID;
  }

  public SiteContentTimeSeriesChart editable(Boolean editable) {
    this.editable = editable;
    return this;
  }

  /**
   * Get editable
   * @return editable
   **/
  @JsonProperty(value = "editable")
  @Schema(required = true, description = "")
  @NotNull 
  public Boolean getEditable() {
    return editable;
  }

  public void setEditable(Boolean editable) {
    this.editable = editable;
  }

  public SiteContentTimeSeriesChart updatePeriodInSeconds(Integer updatePeriodInSeconds) {
    this.updatePeriodInSeconds = updatePeriodInSeconds;
    return this;
  }

  /**
   * Get updatePeriodInSeconds
   * @return updatePeriodInSeconds
   **/
  @JsonProperty(value = "updatePeriodInSeconds")
  @Schema(required = true, description = "")
  @NotNull 
  public Integer getUpdatePeriodInSeconds() {
    return updatePeriodInSeconds;
  }

  public void setUpdatePeriodInSeconds(Integer updatePeriodInSeconds) {
    this.updatePeriodInSeconds = updatePeriodInSeconds;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SiteContentTimeSeriesChart siteContentTimeSeriesChart = (SiteContentTimeSeriesChart) o;
    return Objects.equals(this.uniqueContentID, siteContentTimeSeriesChart.uniqueContentID) &&
        Objects.equals(this.editable, siteContentTimeSeriesChart.editable) &&
        Objects.equals(this.updatePeriodInSeconds, siteContentTimeSeriesChart.updatePeriodInSeconds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uniqueContentID, editable, updatePeriodInSeconds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SiteContentTimeSeriesChart {\n");
    
    sb.append("    uniqueContentID: ").append(toIndentedString(uniqueContentID)).append("\n");
    sb.append("    editable: ").append(toIndentedString(editable)).append("\n");
    sb.append("    updatePeriodInSeconds: ").append(toIndentedString(updatePeriodInSeconds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

