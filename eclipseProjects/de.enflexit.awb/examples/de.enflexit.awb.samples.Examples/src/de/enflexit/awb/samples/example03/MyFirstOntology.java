// file: MyFirstOntology.java generated by ontology bean generator.  DO NOT EDIT, UNLESS YOU ARE REALLY SURE WHAT YOU ARE DOING!
package de.enflexit.awb.samples.example03;

import jade.content.onto.*;
import jade.content.schema.*;
import jade.util.leap.HashMap;
import jade.content.lang.Codec;
import jade.core.CaseInsensitiveString;

/** file: MyFirstOntology.java
 * @author ontology bean generator
 * @version 2013/12/4, 11:00:31
 */
@SuppressWarnings("unused")
public class MyFirstOntology extends jade.content.onto.Ontology  {
  /**
	 * 
	 */
	private static final long serialVersionUID = 1L;
//NAME
  public static final String ONTOLOGY_NAME = "MyFirst";
  // The singleton instance of this ontology
  private static ReflectiveIntrospector introspect = new ReflectiveIntrospector();
  private static Ontology theInstance = new MyFirstOntology();
  public static Ontology getInstance() {
     return theInstance;
  }


   // VOCABULARY
    public static final String PINGPONGMESSAGE_MSGTEXT="msgText";
    public static final String PINGPONGMESSAGE_PINGPONGCOUNTER="pingPongCounter";
    public static final String PINGPONGMESSAGE_REQUIRESACTION="requiresAction";
    public static final String PINGPONGMESSAGE="PingPongMessage";
    public static final String FOOTBALLTEAM_PLAYER="player";
    public static final String FOOTBALLTEAM="FootballTeam";
    public static final String PERSON_SURNAME="surname";
    public static final String PERSON_PRENAME="prename";
    public static final String PERSON_AGE="age";
    public static final String PERSON="Person";

  /**
   * Constructor
  */
  private MyFirstOntology(){ 
    super(ONTOLOGY_NAME, BasicOntology.getInstance());
    try { 

    // adding Concept(s)
    ConceptSchema personSchema = new ConceptSchema(PERSON);
    add(personSchema, de.enflexit.awb.samples.example03.Person.class);
    ConceptSchema footballTeamSchema = new ConceptSchema(FOOTBALLTEAM);
    add(footballTeamSchema, de.enflexit.awb.samples.example03.FootballTeam.class);

    // adding AgentAction(s)
    AgentActionSchema pingPongMessageSchema = new AgentActionSchema(PINGPONGMESSAGE);
    add(pingPongMessageSchema, de.enflexit.awb.samples.example03.PingPongMessage.class);

    // adding AID(s)

    // adding Predicate(s)


    // adding fields
    personSchema.add(PERSON_AGE, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    personSchema.add(PERSON_PRENAME, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    personSchema.add(PERSON_SURNAME, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    footballTeamSchema.add(FOOTBALLTEAM_PLAYER, personSchema, 0, ObjectSchema.UNLIMITED);
    pingPongMessageSchema.add(PINGPONGMESSAGE_REQUIRESACTION, (TermSchema)getSchema(BasicOntology.BOOLEAN), ObjectSchema.OPTIONAL);
    pingPongMessageSchema.add(PINGPONGMESSAGE_PINGPONGCOUNTER, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    pingPongMessageSchema.add(PINGPONGMESSAGE_MSGTEXT, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);

    // adding name mappings

    // adding inheritance

   }catch (java.lang.Exception e) {e.printStackTrace();}
  }
  }
