/*
 * Agent.Workbench REST - API
 * This is the REST-API for Agent.Workbench in an embbedded system mode.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: admin@enflex.it
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.enflexit.awb.samples.ws.restapi.client.gen.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import de.enflexit.awb.samples.ws.restapi.client.gen.handler.JSON;


/**
 * The Agent.Workbench execution state
 */
@JsonPropertyOrder({
  ExecutionState.JSON_PROPERTY_EXECUTION_MODE,
  ExecutionState.JSON_PROPERTY_DEVICE_SYSTEM_EXECUTION_MODE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-04T15:46:53.838547300+02:00[Europe/Berlin]")
public class ExecutionState {
  /**
   * * &#39;APPLICATION&#39; - Runs as end user application in an desktop environment * &#39;SERVER&#39; - Runs as Background server-system * &#39;SERVER_MASTER&#39; - Runs as central &#39;server. master&#39; system and manages all &#39;server.slave&#39; systems * &#39;SERVER_SLAVE&#39; - Runs as central &#39;server. slave&#39; system and wait for start order from the &#39;server.master&#39; * &#39;DEVICE_SYSTEM&#39; - Runs as system that directly executes single agents or projects 
   */
  public enum ExecutionModeEnum {
    APPLICATION("APPLICATION"),
    
    SERVER("SERVER"),
    
    SERVER_MASTER("SERVER_MASTER"),
    
    SERVER_SLAVE("SERVER_SLAVE"),
    
    DEVICE_SYSTEM("DEVICE_SYSTEM");

    private String value;

    ExecutionModeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ExecutionModeEnum fromValue(String value) {
      for (ExecutionModeEnum b : ExecutionModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_EXECUTION_MODE = "executionMode";
  private ExecutionModeEnum executionMode;

  /**
   * * &#39;SETUP&#39; - Runs the selected setup of an AWB projekt * &#39;AGENT&#39; - Runs one or more agents from an AWB project 
   */
  public enum DeviceSystemExecutionModeEnum {
    SETUP("SETUP"),
    
    AGENT("AGENT");

    private String value;

    DeviceSystemExecutionModeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DeviceSystemExecutionModeEnum fromValue(String value) {
      for (DeviceSystemExecutionModeEnum b : DeviceSystemExecutionModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_DEVICE_SYSTEM_EXECUTION_MODE = "deviceSystemExecutionMode";
  private DeviceSystemExecutionModeEnum deviceSystemExecutionMode;

  public ExecutionState() { 
  }

  public ExecutionState executionMode(ExecutionModeEnum executionMode) {
    this.executionMode = executionMode;
    return this;
  }

   /**
   * * &#39;APPLICATION&#39; - Runs as end user application in an desktop environment * &#39;SERVER&#39; - Runs as Background server-system * &#39;SERVER_MASTER&#39; - Runs as central &#39;server. master&#39; system and manages all &#39;server.slave&#39; systems * &#39;SERVER_SLAVE&#39; - Runs as central &#39;server. slave&#39; system and wait for start order from the &#39;server.master&#39; * &#39;DEVICE_SYSTEM&#39; - Runs as system that directly executes single agents or projects 
   * @return executionMode
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXECUTION_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ExecutionModeEnum getExecutionMode() {
    return executionMode;
  }


  @JsonProperty(JSON_PROPERTY_EXECUTION_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExecutionMode(ExecutionModeEnum executionMode) {
    this.executionMode = executionMode;
  }


  public ExecutionState deviceSystemExecutionMode(DeviceSystemExecutionModeEnum deviceSystemExecutionMode) {
    this.deviceSystemExecutionMode = deviceSystemExecutionMode;
    return this;
  }

   /**
   * * &#39;SETUP&#39; - Runs the selected setup of an AWB projekt * &#39;AGENT&#39; - Runs one or more agents from an AWB project 
   * @return deviceSystemExecutionMode
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEVICE_SYSTEM_EXECUTION_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DeviceSystemExecutionModeEnum getDeviceSystemExecutionMode() {
    return deviceSystemExecutionMode;
  }


  @JsonProperty(JSON_PROPERTY_DEVICE_SYSTEM_EXECUTION_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDeviceSystemExecutionMode(DeviceSystemExecutionModeEnum deviceSystemExecutionMode) {
    this.deviceSystemExecutionMode = deviceSystemExecutionMode;
  }


  /**
   * Return true if this ExecutionState object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExecutionState executionState = (ExecutionState) o;
    return Objects.equals(this.executionMode, executionState.executionMode) &&
        Objects.equals(this.deviceSystemExecutionMode, executionState.deviceSystemExecutionMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(executionMode, deviceSystemExecutionMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExecutionState {\n");
    sb.append("    executionMode: ").append(toIndentedString(executionMode)).append("\n");
    sb.append("    deviceSystemExecutionMode: ").append(toIndentedString(deviceSystemExecutionMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

